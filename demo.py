#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π mozgach108
"""

import asyncio
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

from src.mozgach108_system import Mozgach108System
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


async def demo_spiritual_queries():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥—É—Ö–æ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\n" + "="*60)
    print("üïâÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–£–•–û–í–ù–û–ô –°–§–ï–†–´")
    print("="*60)
    
    spiritual_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–∏—Ç–∞—Ü–∏—è?",
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±—É–¥–¥–∏–∑–º–∞",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å –≤ –¥—É—Ö–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–Ω—Ç—Ä—ã –∏ –∫–∞–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —á–∞–∫—Ä–∞—Ö –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö"
    ]
    
    system = Mozgach108System()
    await asyncio.sleep(2)  # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    for i, query in enumerate(spiritual_queries, 1):
        print(f"\nüîÆ –ó–∞–ø—Ä–æ—Å {i}: {query}")
        print("-" * 50)
        
        try:
            response = await system.query(query, domain_hint="spiritual")
            print(f"–û—Ç–≤–µ—Ç: {response.content[:200]}...")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
            print(f"–í—Ä–µ–º—è: {response.processing_time:.2f}—Å")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await system.shutdown()


async def demo_material_queries():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\n" + "="*60)
    print("üî¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–¨–ù–û–ô –°–§–ï–†–´")
    print("="*60)
    
    material_queries = [
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –î–ù–ö?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ç–µ–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≠–π–Ω—à—Ç–µ–π–Ω–∞",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"
    ]
    
    system = Mozgach108System()
    await asyncio.sleep(2)
    
    for i, query in enumerate(material_queries, 1):
        print(f"\nüîÆ –ó–∞–ø—Ä–æ—Å {i}: {query}")
        print("-" * 50)
        
        try:
            response = await system.query(query, domain_hint="material")
            print(f"–û—Ç–≤–µ—Ç: {response.content[:200]}...")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
            print(f"–í—Ä–µ–º—è: {response.processing_time:.2f}—Å")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await system.shutdown()


async def demo_programming_queries():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*60)
    print("üíª –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–§–ï–†–´ –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    programming_queries = [
        "–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python?",
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Ç—Ç–µ—Ä–Ω Singleton?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç React?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏"
    ]
    
    system = Mozgach108System()
    await asyncio.sleep(2)
    
    for i, query in enumerate(programming_queries, 1):
        print(f"\nüîÆ –ó–∞–ø—Ä–æ—Å {i}: {query}")
        print("-" * 50)
        
        try:
            response = await system.query(query, domain_hint="programming")
            print(f"–û—Ç–≤–µ—Ç: {response.content[:200]}...")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
            print(f"–í—Ä–µ–º—è: {response.processing_time:.2f}—Å")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await system.shutdown()


async def demo_quantum_queries():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\n" + "="*60)
    print("üîÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–í–ê–ù–¢–û–í–´–• –¢–ï–•–ù–û–õ–û–ì–ò–ô")
    print("="*60)
    
    quantum_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å?",
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –ì—Ä–æ–≤–µ—Ä–∞",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"
    ]
    
    system = Mozgach108System()
    await asyncio.sleep(2)
    
    for i, query in enumerate(quantum_queries, 1):
        print(f"\nüîÆ –ó–∞–ø—Ä–æ—Å {i}: {query}")
        print("-" * 50)
        
        try:
            response = await system.query(query, domain_hint="quantum")
            print(f"–û—Ç–≤–µ—Ç: {response.content[:200]}...")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
            print(f"–í—Ä–µ–º—è: {response.processing_time:.2f}—Å")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await system.shutdown()


async def demo_batch_processing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\n" + "="*60)
    print("üì¶ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
    print("="*60)
    
    batch_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è?",
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –Ω–∞ Python",
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—é"
    ]
    
    system = Mozgach108System()
    await asyncio.sleep(2)
    
    print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(batch_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    try:
        responses = await system.batch_query(batch_queries)
        
        for i, (query, response) in enumerate(zip(batch_queries, responses), 1):
            print(f"\nüîÆ –ó–∞–ø—Ä–æ—Å {i}: {query}")
            print(f"–û—Ç–≤–µ—Ç: {response.content[:150]}...")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
            print(f"–í—Ä–µ–º—è: {response.processing_time:.2f}—Å")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    await system.shutdown()


async def demo_system_stats():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("\n" + "="*60)
    print("üìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´")
    print("="*60)
    
    system = Mozgach108System()
    await asyncio.sleep(2)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    test_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ mozgach108?",
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –∫–≤–∞–Ω—Ç–æ–≤—É—é –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–∏—Ç–∞—Ü–∏—è?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏"
    ]
    
    for query in test_queries:
        try:
            await system.query(query)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = system.get_system_stats()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã mozgach108:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['average_processing_time']:.2f}—Å")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1%}")
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {stats['loaded_models']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {stats['active_domains']}")
    print(f"   –°–∏–ª–∞ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏: {stats['quantum_entanglement_strength']:.3f}")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage_mb']}MB")
    
    await system.shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ MOZGACH108")
    print("–°–∏—Å—Ç–µ–º–∞ –∏–∑ 108 –∫–≤–∞–Ω—Ç–æ–≤–æ-–∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("="*60)
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ñ–µ—Ä–∞–º
        await demo_spiritual_queries()
        await demo_material_queries()
        await demo_programming_queries()
        await demo_quantum_queries()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await demo_batch_processing()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await demo_system_stats()
        
        print("\n" + "="*60)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("üîÆ mozgach108 - –±—É–¥—É—â–µ–µ –ò–ò —É–∂–µ –∑–¥–µ—Å—å!")
        print("="*60)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
