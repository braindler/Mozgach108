"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã mozgach108
"""

import asyncio
import logging
import time
from typing import List, Dict, Any

from src.mozgach108_system import Mozgach108System
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class Mozgach108Tester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã mozgach108"""
    
    def __init__(self):
        self.system = None
        self.test_results = []
    
    async def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        self.system = Mozgach108System()
        
        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(3)
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def test_basic_query(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        logger.info("üß™ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        
        test_query = "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å?"
        start_time = time.time()
        
        try:
            response = await self.system.query(test_query)
            end_time = time.time()
            
            result = {
                "test_name": "basic_query",
                "status": "passed",
                "query": test_query,
                "response_length": len(response.content),
                "confidence": response.confidence,
                "processing_time": response.processing_time,
                "total_time": end_time - start_time,
                "domains_used": list(response.domain_weights.keys())
            }
            
            logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {response.confidence:.2f} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                "test_name": "basic_query",
                "status": "failed",
                "error": str(e)
            }
    
    async def test_domain_specific_queries(self) -> List[Dict[str, Any]]:
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–æ–º–µ–Ω–∞–º"""
        logger.info("üß™ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–æ–º–µ–Ω–∞–º...")
        
        test_queries = [
            ("–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python?", "programming"),
            ("–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±—É–¥–¥–∏–∑–º–∞", "spiritual"),
            ("–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è?", "quantum"),
            ("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è?", "material")
        ]
        
        results = []
        
        for query, domain_hint in test_queries:
            try:
                start_time = time.time()
                response = await self.system.query(query, domain_hint)
                end_time = time.time()
                
                result = {
                    "test_name": f"domain_query_{domain_hint}",
                    "status": "passed",
                    "query": query,
                    "domain_hint": domain_hint,
                    "confidence": response.confidence,
                    "processing_time": response.processing_time,
                    "total_time": end_time - start_time,
                    "primary_domain": max(response.domain_weights.items(), key=lambda x: x[1])[0] if response.domain_weights else None
                }
                
                logger.info(f"‚úÖ {domain_hint} –∑–∞–ø—Ä–æ—Å: {response.confidence:.2f} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
                results.append(result)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ {domain_hint} –∑–∞–ø—Ä–æ—Å–∞: {e}")
                results.append({
                    "test_name": f"domain_query_{domain_hint}",
                    "status": "failed",
                    "error": str(e)
                })
        
        return results
    
    async def test_batch_queries(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        batch_queries = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –π–æ–≥–∏",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è?",
            "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?"
        ]
        
        try:
            start_time = time.time()
            responses = await self.system.batch_query(batch_queries)
            end_time = time.time()
            
            total_confidence = sum(r.confidence for r in responses)
            avg_confidence = total_confidence / len(responses)
            
            result = {
                "test_name": "batch_queries",
                "status": "passed",
                "query_count": len(batch_queries),
                "response_count": len(responses),
                "average_confidence": avg_confidence,
                "total_processing_time": sum(r.processing_time for r in responses),
                "total_time": end_time - start_time,
                "success_rate": len(responses) / len(batch_queries)
            }
            
            logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {avg_confidence:.2f} —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return {
                "test_name": "batch_queries",
                "status": "failed",
                "error": str(e)
            }
    
    async def test_quantum_entanglement(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
            stats = self.system.get_system_stats()
            
            result = {
                "test_name": "quantum_entanglement",
                "status": "passed",
                "entanglement_strength": stats["quantum_entanglement_strength"],
                "loaded_models": stats["loaded_models"],
                "active_domains": stats["active_domains"],
                "memory_usage_mb": stats["memory_usage_mb"]
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç
            if stats["quantum_entanglement_strength"] > 0:
                logger.info(f"‚úÖ –ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å: {stats['quantum_entanglement_strength']:.3f}")
            else:
                logger.warning("‚ö†Ô∏è –ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                result["status"] = "warning"
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏: {e}")
            return {
                "test_name": "quantum_entanglement",
                "status": "failed",
                "error": str(e)
            }
    
    async def test_memory_system(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            test_queries = [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
                "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å?"
            ]
            
            for query in test_queries:
                await self.system.query(query)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
            memory_stats = self.system.quantum_memory.get_memory_stats()
            
            result = {
                "test_name": "memory_system",
                "status": "passed",
                "total_entries": memory_stats["total_entries"],
                "total_patterns": memory_stats["total_patterns"],
                "memory_usage_mb": memory_stats["memory_usage_mb"],
                "average_confidence": memory_stats["average_confidence"],
                "domains": memory_stats["domains"]
            }
            
            logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏: {memory_stats['total_entries']} –∑–∞–ø–∏—Å–µ–π")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏: {e}")
            return {
                "test_name": "memory_system",
                "status": "failed",
                "error": str(e)
            }
    
    async def test_performance(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            test_queries = [
                "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç 1",
                "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç 2", 
                "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç 3",
                "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç 4",
                "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç 5"
            ]
            
            start_time = time.time()
            responses = await self.system.batch_query(test_queries)
            end_time = time.time()
            
            total_time = end_time - start_time
            avg_time_per_query = total_time / len(test_queries)
            
            result = {
                "test_name": "performance",
                "status": "passed",
                "total_queries": len(test_queries),
                "total_time": total_time,
                "average_time_per_query": avg_time_per_query,
                "queries_per_second": len(test_queries) / total_time,
                "average_confidence": sum(r.confidence for r in responses) / len(responses)
            }
            
            logger.info(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_time_per_query:.2f}—Å –Ω–∞ –∑–∞–ø—Ä–æ—Å")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {
                "test_name": "performance",
                "status": "failed",
                "error": str(e)
            }
    
    async def test_optimization(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üß™ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            stats_before = self.system.get_system_stats()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            start_time = time.time()
            await self.system.optimize_system()
            end_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            stats_after = self.system.get_system_stats()
            
            result = {
                "test_name": "optimization",
                "status": "passed",
                "optimization_time": end_time - start_time,
                "memory_before_mb": stats_before["memory_usage_mb"],
                "memory_after_mb": stats_after["memory_usage_mb"],
                "models_before": stats_before["loaded_models"],
                "models_after": stats_after["loaded_models"],
                "entanglement_before": stats_before["quantum_entanglement_strength"],
                "entanglement_after": stats_after["quantum_entanglement_strength"]
            }
            
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {end_time - start_time:.2f}—Å")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                "test_name": "optimization",
                "status": "failed",
                "error": str(e)
            }
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã mozgach108...")
        
        await self.initialize_system()
        
        test_results = []
        
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        test_results.append(await self.test_basic_query())
        
        # –¢–µ—Å—Ç—ã –ø–æ –¥–æ–º–µ–Ω–∞–º
        domain_results = await self.test_domain_specific_queries()
        test_results.extend(domain_results)
        
        # –ü–∞–∫–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_results.append(await self.test_batch_queries())
        
        # –¢–µ—Å—Ç—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        test_results.append(await self.test_quantum_entanglement())
        
        # –¢–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏
        test_results.append(await self.test_memory_system())
        
        # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        test_results.append(await self.test_performance())
        
        # –¢–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        test_results.append(await self.test_optimization())
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        passed_tests = [r for r in test_results if r["status"] == "passed"]
        failed_tests = [r for r in test_results if r["status"] == "failed"]
        warning_tests = [r for r in test_results if r["status"] == "warning"]
        
        summary = {
            "total_tests": len(test_results),
            "passed": len(passed_tests),
            "failed": len(failed_tests),
            "warnings": len(warning_tests),
            "success_rate": len(passed_tests) / len(test_results) if test_results else 0,
            "test_results": test_results,
            "system_stats": self.system.get_system_stats()
        }
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {len(passed_tests)}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(failed_tests)}")
        logger.info(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warning_tests)}")
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1%}")
        
        return summary
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.system:
            await self.system.shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = Mozgach108Tester()
    
    try:
        results = await tester.run_all_tests()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        import json
        with open("test_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        
        print("\n" + "="*60)
        print("üîÆ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MOZGACH108")
        print("="*60)
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {results['total_tests']}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {results['passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {results['failed']}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {results['warnings']}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['success_rate']:.1%}")
        print("="*60)
        
        if results['failed'] > 0:
            print("\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            for test in results['test_results']:
                if test['status'] == 'failed':
                    print(f"  - {test['test_name']}: {test.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        if results['warnings'] > 0:
            print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for test in results['test_results']:
                if test['status'] == 'warning':
                    print(f"  - {test['test_name']}")
        
        print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return 0 if results['failed'] == 0 else 1
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 1
    
    finally:
        await tester.cleanup()


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)
