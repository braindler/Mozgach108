#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã Mozgach2
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from config import config, ModelType
from src.mozgach2_system import Mozgach2System


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Mozgach2")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system = Mozgach2System(auto_load_models=True)
    
    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    test_queries = [
        ("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å?", ModelType.TECHNICAL),
        ("–î—É—Ö–æ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±—É–¥–¥–∏–∑–º–∞", ModelType.SPIRITUAL),
        ("–ë–∏–∑–Ω–µ—Å –≤–æ–ø—Ä–æ—Å", "–ö–∞–∫–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –±–∏–∑–Ω–µ—Å–µ?", ModelType.BUSINESS),
        ("–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å", "–ö–∞–∫ —Ä–∞–∑–≤–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å?", ModelType.CREATIVE),
        ("–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", ModelType.CONVERSATIONAL),
        ("–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å", "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?", ModelType.GENERAL)
    ]
    
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("-" * 60)
    
    for query_type, query_text, expected_model_type in test_queries:
        print(f"\nüîç {query_type}:")
        print(f"   –ó–∞–ø—Ä–æ—Å: {query_text}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        result = await system.query(query_text)
        
        print(f"   –û—Ç–≤–µ—Ç: {result.response[:100]}...")
        print(f"   –ú–æ–¥–µ–ª—å: {result.model_used}")
        print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {result.model_type.value}")
        print(f"   –ì—Ä—É–ø–ø–∞ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏: {result.quantum_group}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time:.3f}—Å")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –º–æ–¥–µ–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
        if result.model_type == expected_model_type:
            print("   ‚úÖ –¢–∏–ø –º–æ–¥–µ–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
        else:
            print(f"   ‚ö†Ô∏è –¢–∏–ø –º–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (–æ–∂–∏–¥–∞–ª—Å—è {expected_model_type.value})")
    
    return system


async def test_batch_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\n\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("=" * 60)
    
    system = Mozgach2System(auto_load_models=False)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π
    await system.model_manager.load_model("mozgach2_general_01")
    await system.model_manager.load_model("mozgach2_technical_01")
    await system.model_manager.load_model("mozgach2_spiritual_01")
    
    # –ü–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    batch_queries = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞?",
        "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –¥—Ä–µ–≤–Ω–∏—Ö —Ñ–∏–ª–æ—Å–æ—Ñ–∞—Ö",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"
    ]
    
    print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ {len(batch_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤...")
    start_time = asyncio.get_event_loop().time()
    
    results = await system.batch_query(batch_queries)
    
    total_time = asyncio.get_event_loop().time() - start_time
    
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.3f}—Å")
    print(f"üöÄ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {total_time/len(batch_queries):.3f}—Å")
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    for i, (query, result) in enumerate(zip(batch_queries, results), 1):
        print(f"  {i}. {query[:50]}... ‚Üí {result.model_used} ({result.processing_time:.3f}—Å)")
    
    await system.shutdown()


async def test_system_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("\n\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    system = Mozgach2System(auto_load_models=True)
    
    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
    await asyncio.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status = system.get_system_status()
    
    print("üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Mozgach2:")
    print(f"  üìö –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {status.total_models}")
    print(f"  üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {status.loaded_models}")
    print(f"  üß† –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {status.available_memory_gb:.2f} GB")
    print(f"  üéÆ GPU –ø–∞–º—è—Ç—å: {status.gpu_memory_gb:.2f} GB")
    print(f"  ‚ö° –ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {status.system_load:.2f}")
    print(f"  üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {status.active_queries}")
    print(f"  üéØ –ö—ç—à-—Ö–∏—Ç: {status.cache_hit_rate:.1%}")
    
    # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    history = system.get_query_history(limit=5)
    if history:
        print(f"\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(history)} –∑–∞–ø—Ä–æ—Å–æ–≤:")
        for i, entry in enumerate(history, 1):
            print(f"  {i}. {entry['query'][:50]}... ‚Üí {entry['result'].model_used}")
    
    await system.shutdown()


async def test_quantum_entanglement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏"""
    print("\n\n‚öõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    system = Mozgach2System(auto_load_models=False)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –∏–∑ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏
    await system.model_manager.load_model("mozgach2_general_01")
    await system.model_manager.load_model("mozgach2_technical_01")
    await system.model_manager.load_model("mozgach2_spiritual_01")
    
    print("üîó –ì—Ä—É–ø–ø—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏:")
    for group_id, models in system.quantum_manager.entanglement_groups.items():
        if any(m in system.model_manager.loaded_models for m in models):
            print(f"  –ì—Ä—É–ø–ø–∞ {group_id}: {models}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å
    test_model = "mozgach2_general_01"
    entangled_models = system.quantum_manager.get_entangled_models(test_model)
    
    print(f"\nüîó –ú–æ–¥–µ–ª–∏, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–µ —Å {test_model}:")
    for model in entangled_models:
        print(f"  - {model}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    query = "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å?"
    query_type = system.query_router.classify_query(query)
    optimal_group = system.quantum_manager.get_optimal_model_group(query, query_type)
    
    print(f"\nüéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}':")
    print(f"  –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {query_type.value}")
    print(f"  –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: {optimal_group}")
    
    await system.shutdown()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Mozgach2")
    print("=" * 80)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        system = await test_basic_functionality()
        await system.shutdown()
        
        # –¢–µ—Å—Ç 2: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        await test_batch_processing()
        
        # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        await test_system_status()
        
        # –¢–µ—Å—Ç 4: –ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å
        await test_quantum_entanglement()
        
        print("\n\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –°–∏—Å—Ç–µ–º–∞ Mozgach2 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
