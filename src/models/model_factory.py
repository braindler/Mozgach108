"""
–§–∞–±—Ä–∏–∫–∞ –º–æ–¥–µ–ª–µ–π mozgach108 - —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö 108 –º–æ–¥–µ–ª–µ–π
"""

import logging
from typing import Dict, List, Any, Optional
from .base_model import BaseModel
from .spiritual_models import create_spiritual_models
from .material_models import create_material_models
from .programming_models import create_programming_models
from .quantum_models import create_quantum_models

logger = logging.getLogger(__name__)


class ModelFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ 108 –º–æ–¥–µ–ª—è–º–∏ mozgach108
    
    –°–æ–∑–¥–∞–µ—Ç –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    –≤ —Å–∏—Å—Ç–µ–º–µ –∫–≤–∞–Ω—Ç–æ–≤–æ-–∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π"""
        self.models: Dict[str, BaseModel] = {}
        self.model_categories = {
            "spiritual": [],
            "material": [],
            "programming": [],
            "quantum": []
        }
        self.total_models = 0
        
        logger.info("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π mozgach108...")
    
    def create_all_models(self) -> Dict[str, BaseModel]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö 108 –º–æ–¥–µ–ª–µ–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        """
        logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö 108 –º–æ–¥–µ–ª–µ–π mozgach108...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥—É—Ö–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ (58)
            logger.info("üïâÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—Ö–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
            spiritual_models = create_spiritual_models()
            for model in spiritual_models:
                self.models[model.model_id] = model
                self.model_categories["spiritual"].append(model.model_id)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (60)
            logger.info("üî¨ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
            material_models = create_material_models()
            for model in material_models:
                self.models[model.model_id] = model
                self.model_categories["material"].append(model.model_id)
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (38)
            logger.info("üíª –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...")
            programming_models = create_programming_models()
            for model in programming_models:
                self.models[model.model_id] = model
                self.model_categories["programming"].append(model.model_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ (12)
            logger.info("üîÆ –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π...")
            quantum_models = create_quantum_models()
            for model in quantum_models:
                self.models[model.model_id] = model
                self.model_categories["quantum"].append(model.model_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
            self.total_models = len(self.models)
            
            if self.total_models == 108:
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {self.total_models} –º–æ–¥–µ–ª–µ–π mozgach108")
                logger.info(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for category, model_ids in self.model_categories.items():
                    logger.info(f"   {category}: {len(model_ids)} –º–æ–¥–µ–ª–µ–π")
            else:
                logger.warning(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ {self.total_models} –º–æ–¥–µ–ª–µ–π –≤–º–µ—Å—Ç–æ 108")
            
            return self.models
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            raise
    
    def get_model(self, model_id: str) -> Optional[BaseModel]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ ID
        
        Args:
            model_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏
            
        Returns:
            –ú–æ–¥–µ–ª—å –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        return self.models.get(model_id)
    
    def get_models_by_category(self, category: str) -> List[BaseModel]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        model_ids = self.model_categories.get(category, [])
        return [self.models[model_id] for model_id in model_ids if model_id in self.models]
    
    def get_models_by_domain(self, domain: str) -> List[BaseModel]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ –¥–æ–º–µ–Ω—É
        
        Args:
            domain: –î–æ–º–µ–Ω –∑–Ω–∞–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ –¥–æ–º–µ–Ω–µ
        """
        return [model for model in self.models.values() if model.domain == domain]
    
    def get_model_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
        """
        stats = {
            "total_models": len(self.models),
            "categories": {},
            "domains": {},
            "loaded_models": 0,
            "total_queries": 0,
            "total_processing_time": 0.0
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, model_ids in self.model_categories.items():
            stats["categories"][category] = len(model_ids)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º
        for model in self.models.values():
            domain = model.domain
            if domain not in stats["domains"]:
                stats["domains"][domain] = 0
            stats["domains"][domain] += 1
            
            if model.is_loaded:
                stats["loaded_models"] += 1
            
            stats["total_queries"] += model.query_count
            stats["total_processing_time"] += model.total_processing_time
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if stats["total_models"] > 0:
            stats["average_queries_per_model"] = stats["total_queries"] / stats["total_models"]
            stats["average_processing_time_per_model"] = stats["total_processing_time"] / stats["total_models"]
        
        return stats
    
    def get_model_capabilities_summary(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–µ–π
        
        Returns:
            –°–≤–æ–¥–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        """
        capabilities = {
            "total_languages": set(),
            "total_specializations": set(),
            "max_context_length": 0,
            "total_memory_requirements": 0,
            "quantum_signatures": []
        }
        
        for model in self.models.values():
            model_caps = model.get_capabilities()
            
            # –Ø–∑—ã–∫–∏
            capabilities["total_languages"].update(model_caps.supported_languages)
            
            # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            capabilities["total_specializations"].update(model_caps.specializations)
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            capabilities["max_context_length"] = max(
                capabilities["max_context_length"], 
                model_caps.max_context_length
            )
            
            # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏
            capabilities["total_memory_requirements"] += model_caps.memory_requirements_mb
            
            # –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏
            capabilities["quantum_signatures"].append(model_caps.quantum_signature)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        capabilities["total_languages"] = list(capabilities["total_languages"])
        capabilities["total_specializations"] = list(capabilities["total_specializations"])
        
        return capabilities
    
    def find_models_for_query(self, query: str, domain_hints: Optional[List[str]] = None) -> List[BaseModel]:
        """
        –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            domain_hints: –ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ –¥–æ–º–µ–Ω–∞—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–µ–π
        """
        query_lower = query.lower()
        suitable_models = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –¥–æ–º–µ–Ω–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if domain_hints:
            for domain in domain_hints:
                domain_models = self.get_models_by_domain(domain)
                suitable_models.extend(domain_models)
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–µ–π
            for model in self.models.values():
                model_caps = model.get_capabilities()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
                for specialization in model_caps.specializations:
                    if specialization.lower() in query_lower:
                        suitable_models.append(model)
                        break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–µ –º–æ–¥–µ–ª–∏
        if not suitable_models:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for category in ["spiritual", "material", "programming", "quantum"]:
                category_models = self.get_models_by_category(category)
                if category_models:
                    suitable_models.append(category_models[0])
        
        return suitable_models[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–æ–¥–µ–ª–µ–π
    
    def get_model_performance_ranking(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        model_performance = []
        
        for model in self.models.values():
            if model.query_count > 0:
                avg_processing_time = model.total_processing_time / model.query_count
                performance_score = model.query_count / (avg_processing_time + 0.001)  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
                
                model_performance.append({
                    "model_id": model.model_id,
                    "domain": model.domain,
                    "query_count": model.query_count,
                    "average_processing_time": avg_processing_time,
                    "performance_score": performance_score,
                    "is_loaded": model.is_loaded
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤, –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)
        model_performance.sort(key=lambda x: x["performance_score"], reverse=True)
        
        return model_performance
    
    def optimize_model_selection(self, query: str) -> List[BaseModel]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥–µ–ª–∏
        suitable_models = self.find_models_for_query(query)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_ranking = self.get_model_performance_ranking()
        performance_dict = {item["model_id"]: item["performance_score"] for item in performance_ranking}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        suitable_models.sort(
            key=lambda model: performance_dict.get(model.model_id, 0), 
            reverse=True
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 –º–æ–¥–µ–ª–∏
        return suitable_models[:3]
    
    def get_model_health_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥–µ–ª–µ–π
        
        Returns:
            –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥–µ–ª–µ–π
        """
        health_status = {
            "healthy_models": 0,
            "warning_models": 0,
            "error_models": 0,
            "total_models": len(self.models),
            "model_details": []
        }
        
        for model in self.models.values():
            model_health = {
                "model_id": model.model_id,
                "domain": model.domain,
                "is_loaded": model.is_loaded,
                "query_count": model.query_count,
                "status": "healthy"
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            if not model.is_loaded:
                model_health["status"] = "error"
                health_status["error_models"] += 1
            elif model.query_count == 0:
                model_health["status"] = "warning"
                health_status["warning_models"] += 1
            else:
                health_status["healthy_models"] += 1
            
            health_status["model_details"].append(model_health)
        
        return health_status
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏"""
        return f"ModelFactory(total_models={self.total_models}, categories={len(self.model_categories)})"
    
    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (f"ModelFactory(models={len(self.models)}, "
                f"spiritual={len(self.model_categories['spiritual'])}, "
                f"material={len(self.model_categories['material'])}, "
                f"programming={len(self.model_categories['programming'])}, "
                f"quantum={len(self.model_categories['quantum'])})")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –º–æ–¥–µ–ª–µ–π
model_factory = ModelFactory()
