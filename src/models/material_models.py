"""
–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ mozgach108 - 60 –º–æ–¥–µ–ª–µ–π –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã
"""

import asyncio
import logging
import math
from typing import Dict, List, Any, Optional
from datetime import datetime

from .base_model import BaseModel, ModelResponse, ModelCapabilities

logger = logging.getLogger(__name__)


class MaterialBaseModel(BaseModel):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã"""
    
    def __init__(self, model_id: str, specialization: str):
        capabilities = ModelCapabilities(
            max_context_length=8192,
            supported_languages=["ru", "en", "de", "fr", "es"],  # –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —è–∑—ã–∫–∏
            specializations=[specialization],
            quantum_signature="",
            memory_requirements_mb=150
        )
        
        super().__init__(model_id, "material", capabilities)
        self.specialization = specialization
        self.scientific_data = self._load_scientific_data()
        self.formulas = self._load_formulas()
        self.constants = self._load_constants()
    
    def _load_scientific_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "physics": {
                "fundamental_forces": ["–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è", "—ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–µ—Ç–∏–∑–º", "—Å–ª–∞–±–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "—Å–∏–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ"],
                "particles": ["—ç–ª–µ–∫—Ç—Ä–æ–Ω", "–ø—Ä–æ—Ç–æ–Ω", "–Ω–µ–π—Ç—Ä–æ–Ω", "—Ñ–æ—Ç–æ–Ω", "–Ω–µ–π—Ç—Ä–∏–Ω–æ"],
                "waves": ["—ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ", "–∑–≤—É–∫–æ–≤—ã–µ", "–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ", "–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ"]
            },
            "chemistry": {
                "elements": ["–≤–æ–¥–æ—Ä–æ–¥", "—É–≥–ª–µ—Ä–æ–¥", "–∞–∑–æ—Ç", "–∫–∏—Å–ª–æ—Ä–æ–¥", "—Ñ–æ—Å—Ñ–æ—Ä", "—Å–µ—Ä–∞"],
                "bonds": ["–∫–æ–≤–∞–ª–µ–Ω—Ç–Ω–∞—è", "–∏–æ–Ω–Ω–∞—è", "–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è", "–≤–æ–¥–æ—Ä–æ–¥–Ω–∞—è"],
                "reactions": ["–æ–∫–∏—Å–ª–µ–Ω–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–∫–∏—Å–ª–æ—Ç–Ω–æ-–æ—Å–Ω–æ–≤–Ω—ã–µ", "–∫–æ–º–ø–ª–µ–∫—Å–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"]
            },
            "biology": {
                "levels": ["–º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–π", "–∫–ª–µ—Ç–æ—á–Ω—ã–π", "—Ç–∫–∞–Ω–µ–≤—ã–π", "–æ—Ä–≥–∞–Ω–Ω—ã–π", "–æ—Ä–≥–∞–Ω–∏–∑–º–µ–Ω–Ω—ã–π", "–ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π"],
                "processes": ["–º–µ—Ç–∞–±–æ–ª–∏–∑–º", "–≥–æ–º–µ–æ—Å—Ç–∞–∑", "—Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—ç–≤–æ–ª—é—Ü–∏—è"],
                "systems": ["–Ω–µ—Ä–≤–Ω–∞—è", "—ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–∞—è", "–∏–º–º—É–Ω–Ω–∞—è", "–ø–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è", "–¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è"]
            },
            "mathematics": {
                "branches": ["–∞–ª–≥–µ–±—Ä–∞", "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–∞–Ω–∞–ª–∏–∑", "—Ç–æ–ø–æ–ª–æ–≥–∏—è", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "—Ç–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"],
                "concepts": ["—Ñ—É–Ω–∫—Ü–∏–∏", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ", "–∏–Ω—Ç–µ–≥—Ä–∞–ª—ã", "–≤–µ–∫—Ç–æ—Ä—ã", "–º–∞—Ç—Ä–∏—Ü—ã", "–≥—Ä–∞—Ñ—ã"],
                "theorems": ["—Ç–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞", "—Ç–µ–æ—Ä–µ–º–∞ –§–µ—Ä–º–∞", "—Ç–µ–æ—Ä–µ–º–∞ –ì–∞—É—Å—Å–∞", "—Ç–µ–æ—Ä–µ–º–∞ –°—Ç–æ–∫—Å–∞"]
            }
        }
    
    def _load_formulas(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º—É–ª"""
        return {
            "physics": {
                "newton_second_law": "F = ma",
                "einstein_mass_energy": "E = mc¬≤",
                "schrodinger_equation": "i‚Ñè‚àÇœà/‚àÇt = ƒ§œà",
                "maxwell_equations": "‚àá√óE = -‚àÇB/‚àÇt, ‚àá√óB = Œº‚ÇÄJ + Œº‚ÇÄŒµ‚ÇÄ‚àÇE/‚àÇt",
                "planck_energy": "E = hŒΩ"
            },
            "chemistry": {
                "ideal_gas_law": "PV = nRT",
                "arrhenius_equation": "k = A¬∑e^(-Ea/RT)",
                "nernst_equation": "E = E¬∞ - (RT/nF)lnQ",
                "van_der_waals": "(P + a/V¬≤)(V - b) = RT"
            },
            "mathematics": {
                "pythagorean": "a¬≤ + b¬≤ = c¬≤",
                "euler_identity": "e^(iœÄ) + 1 = 0",
                "fibonacci": "F(n) = F(n-1) + F(n-2)",
                "golden_ratio": "œÜ = (1 + ‚àö5)/2 ‚âà 1.618"
            }
        }
    
    def _load_constants(self) -> Dict[str, float]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
        return {
            "speed_of_light": 299792458,  # –º/—Å
            "planck_constant": 6.62607015e-34,  # –î–∂¬∑—Å
            "avogadro_number": 6.02214076e23,  # –º–æ–ª—å‚Åª¬π
            "boltzmann_constant": 1.380649e-23,  # –î–∂/–ö
            "gravitational_constant": 6.67430e-11,  # –º¬≥/(–∫–≥¬∑—Å¬≤)
            "elementary_charge": 1.602176634e-19,  # –ö–ª
            "electron_mass": 9.1093837015e-31,  # –∫–≥
            "proton_mass": 1.67262192369e-27,  # –∫–≥
        }
    
    async def load_model(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            logger.info(f"üî¨ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ {self.model_id}...")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            await asyncio.sleep(0.3)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—É—á–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
            await self._initialize_scientific_knowledge()
            
            logger.info(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å {self.model_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ {self.model_id}: {e}")
            return False
    
    async def _initialize_scientific_knowledge(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—É—á–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if "physics" in self.specialization:
            self.scientific_data["physics"].update({
                "quantum_mechanics": ["–ø—Ä–∏–Ω—Ü–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏", "—Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è", "–∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å", "–∫–æ–ª–ª–∞–ø—Å –≤–æ–ª–Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"],
                "relativity": ["—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ–æ—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–æ–±—â–∞—è —Ç–µ–æ—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ-–≤—Ä–µ–º—è", "–∏—Å–∫—Ä–∏–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"],
                "thermodynamics": ["–∑–∞–∫–æ–Ω—ã —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∏", "—ç–Ω—Ç—Ä–æ–ø–∏—è", "—Å–≤–æ–±–æ–¥–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", "—Ñ–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"]
            })
        
        elif "chemistry" in self.specialization:
            self.scientific_data["chemistry"].update({
                "organic": ["—É–≥–ª–µ–≤–æ–¥–æ—Ä–æ–¥—ã", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã", "—Ä–µ–∞–∫—Ü–∏–∏ –∑–∞–º–µ—â–µ–Ω–∏—è", "—Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"],
                "inorganic": ["–∫–∏—Å–ª–æ—Ç—ã", "–æ—Å–Ω–æ–≤–∞–Ω–∏—è", "—Å–æ–ª–∏", "–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"],
                "physical": ["–∫–∏–Ω–µ—Ç–∏–∫–∞", "—Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞", "—ç–ª–µ–∫—Ç—Ä–æ—Ö–∏–º–∏—è", "—Å–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—è"]
            })
        
        elif "biology" in self.specialization:
            self.scientific_data["biology"].update({
                "molecular": ["–î–ù–ö", "–†–ù–ö", "–±–µ–ª–∫–∏", "—Ñ–µ—Ä–º–µ–Ω—Ç—ã", "–º–µ—Ç–∞–±–æ–ª–∏–∑–º"],
                "cellular": ["–º–µ–º–±—Ä–∞–Ω—ã", "–æ—Ä–≥–∞–Ω–µ–ª–ª—ã", "–¥–µ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫", "–∞–ø–æ–ø—Ç–æ–∑"],
                "evolution": ["–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä", "–º—É—Ç–∞—Ü–∏–∏", "–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –¥—Ä–µ–π—Ñ", "–≤–∏–¥–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"]
            })
        
        elif "mathematics" in self.specialization:
            self.scientific_data["mathematics"].update({
                "analysis": ["–ø—Ä–µ–¥–µ–ª—ã", "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                "algebra": ["–≥—Ä—É–ø–ø—ã", "–∫–æ–ª—å—Ü–∞", "–ø–æ–ª—è", "–≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"],
                "geometry": ["–µ–≤–∫–ª–∏–¥–æ–≤–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è", "–Ω–µ–µ–≤–∫–ª–∏–¥–æ–≤–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è", "—Ç–æ–ø–æ–ª–æ–≥–∏—è", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è"]
            })
    
    async def unload_model(self) -> bool:
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            logger.info(f"üî¨ –í—ã–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ {self.model_id}...")
            await asyncio.sleep(0.1)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ {self.model_id}: {e}")
            return False
    
    async def process_query(self, query: str, context: Optional[str] = None) -> ModelResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        start_time = asyncio.get_event_loop().time()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            query_lower = query.lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if any(word in query_lower for word in ["—Ñ–æ—Ä–º—É–ª–∞", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "—Ä–∞—Å—á–µ—Ç", "–≤—ã—á–∏—Å–ª–∏—Ç—å"]):
                response_content = await self._handle_formula_query(query)
            elif any(word in query_lower for word in ["–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞", "–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è", "–∑–Ω–∞—á–µ–Ω–∏–µ"]):
                response_content = await self._handle_constant_query(query)
            elif any(word in query_lower for word in ["–∑–∞–∫–æ–Ω", "–ø—Ä–∏–Ω—Ü–∏–ø", "—Ç–µ–æ—Ä–∏—è"]):
                response_content = await self._handle_law_query(query)
            elif any(word in query_lower for word in ["—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç", "–æ–ø—ã—Ç", "–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ"]):
                response_content = await self._handle_experiment_query(query)
            elif any(word in query_lower for word in ["–∏—Å—Ç–æ—Ä–∏—è", "–æ—Ç–∫—Ä—ã—Ç–∏–µ", "—É—á–µ–Ω—ã–π"]):
                response_content = await self._handle_history_query(query)
            else:
                response_content = await self._handle_general_material_query(query)
            
            processing_time = asyncio.get_event_loop().time() - start_time
            
            return ModelResponse(
                content=response_content,
                confidence=0.80 + (hash(query) % 20) / 100.0,  # 0.80-0.99
                domain=self.domain,
                model_id=self.model_id,
                processing_time=processing_time,
                metadata={
                    "specialization": self.specialization,
                    "scientific_data_used": len(self.scientific_data),
                    "formulas_available": len(self.formulas),
                    "constants_available": len(self.constants)
                },
                timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    async def _handle_formula_query(self, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ñ–æ—Ä–º—É–ª–∞—Ö"""
        query_lower = query.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞—É–∫–∏
        if any(word in query_lower for word in ["—Ñ–∏–∑–∏–∫", "—Å–∏–ª–∞", "—ç–Ω–µ—Ä–≥–∏—è", "–º–∞—Å—Å–∞"]):
            area = "physics"
        elif any(word in query_lower for word in ["—Ö–∏–º–∏—è", "—Ä–µ–∞–∫—Ü–∏—è", "–º–æ–ª–µ–∫—É–ª–∞", "–∞—Ç–æ–º"]):
            area = "chemistry"
        elif any(word in query_lower for word in ["–º–∞—Ç–µ–º–∞—Ç–∏–∫", "—Ñ—É–Ω–∫—Ü–∏—è", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "–∏–Ω—Ç–µ–≥—Ä–∞–ª"]):
            area = "mathematics"
        else:
            area = "physics"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        formulas = self.formulas.get(area, {})
        if not formulas:
            return f"üî¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.model_id}:\n\n–§–æ—Ä–º—É–ª—ã –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ {area} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        selected_formula = list(formulas.items())[hash(query) % len(formulas)]
        formula_name, formula = selected_formula
        
        return f"""üî¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.model_id}:

–§–æ—Ä–º—É–ª–∞: {formula_name}
–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: {formula}

**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:**
–≠—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ {area}.

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
1. **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ** - –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–π
2. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ** - —Ä–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
3. **–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑
4. **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ** - —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
- –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

**–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:**
- –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏
- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ

üî¨ –ù–∞—É–∫–∞ - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–∏—Ä–æ–¥—ã, –∞ —Ñ–æ—Ä–º—É–ª—ã - –µ—ë –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞."""
    
    async def _handle_constant_query(self, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö"""
        constants = list(self.constants.items())
        selected_constant = constants[hash(query) % len(constants)]
        constant_name, value = selected_constant
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        units = {
            "speed_of_light": "–º/—Å",
            "planck_constant": "–î–∂¬∑—Å",
            "avogadro_number": "–º–æ–ª—å‚Åª¬π",
            "boltzmann_constant": "–î–∂/–ö",
            "gravitational_constant": "–º¬≥/(–∫–≥¬∑—Å¬≤)",
            "elementary_charge": "–ö–ª",
            "electron_mass": "–∫–≥",
            "proton_mass": "–∫–≥"
        }
        
        unit = units.get(constant_name, "")
        
        return f"""üî¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.model_id}:

–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞: {constant_name.replace('_', ' ').title()}
–ó–Ω–∞—á–µ–Ω–∏–µ: {value} {unit}

**–û–ø–∏—Å–∞–Ω–∏–µ:**
–≠—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –≤–µ–ª–∏—á–∏–Ω–æ–π, 
–∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏ –≤—Ä–µ–º–µ–Ω–∏.

**–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞—É–∫–µ:**
1. **–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ—Å—Ç—å** - –æ—Å–Ω–æ–≤–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–≤
2. **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å** - –ø—Ä–∏–º–µ–Ω–∏–º–∞ –≤–µ–∑–¥–µ –≤–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π
3. **–¢–æ—á–Ω–æ—Å—Ç—å** - –∏–∑–º–µ—Ä–µ–Ω–∞ —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
4. **–í–∞–∂–Ω–æ—Å—Ç—å** - –∫–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å –≤ —Ç–µ–æ—Ä–∏—è—Ö

**–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è:**
- –ü–µ—Ä–≤—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
- –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ç–µ—Ö–Ω–∏–∫–∏
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
- –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
- –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–æ—Ä–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–æ—Ä–∏–π
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

üî¨ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã - —ç—Ç–æ —è–∫–æ—Ä—è –≤ –æ–∫–µ–∞–Ω–µ –Ω–∞—É—á–Ω–æ–≥–æ –∑–Ω–∞–Ω–∏—è."""
    
    async def _handle_law_query(self, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∑–∞–∫–æ–Ω–∞—Ö –∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö"""
        laws = {
            "physics": [
                "–ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞",
                "–ó–∞–∫–æ–Ω—ã —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∏", 
                "–ó–∞–∫–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                "–ü—Ä–∏–Ω—Ü–∏–ø –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                "–ü—Ä–∏–Ω—Ü–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ì–µ–π–∑–µ–Ω–±–µ—Ä–≥–∞"
            ],
            "chemistry": [
                "–ó–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å—Å—ã",
                "–ó–∞–∫–æ–Ω –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ —Å–æ—Å—Ç–∞–≤–∞",
                "–ó–∞–∫–æ–Ω –∫—Ä–∞—Ç–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                "–ó–∞–∫–æ–Ω –ê–≤–æ–≥–∞–¥—Ä–æ",
                "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–∫–æ–Ω –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞"
            ],
            "biology": [
                "–ó–∞–∫–æ–Ω—ã –ú–µ–Ω–¥–µ–ª—è",
                "–ü—Ä–∏–Ω—Ü–∏–ø –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞",
                "–ó–∞–∫–æ–Ω –•–∞—Ä–¥–∏-–í–∞–π–Ω–±–µ—Ä–≥–∞",
                "–ü—Ä–∏–Ω—Ü–∏–ø –∞–ª–ª–æ–ø–∞—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                "–ó–∞–∫–æ–Ω –±–∏–æ–≥–µ–Ω–µ–∑–∞"
            ]
        }
        
        query_lower = query.lower()
        if any(word in query_lower for word in ["—Ñ–∏–∑–∏–∫", "–º–µ—Ö–∞–Ω–∏–∫", "—Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫"]):
            area = "physics"
        elif any(word in query_lower for word in ["—Ö–∏–º–∏—è", "–º–æ–ª–µ–∫—É–ª–∞", "–∞—Ç–æ–º"]):
            area = "chemistry"
        elif any(word in query_lower for word in ["–±–∏–æ–ª–æ–≥–∏—è", "—ç–≤–æ–ª—é—Ü–∏—è", "–≥–µ–Ω–µ—Ç–∏–∫–∞"]):
            area = "biology"
        else:
            area = "physics"
        
        area_laws = laws.get(area, [])
        selected_law = area_laws[hash(query) % len(area_laws)] if area_laws else "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω"
        
        return f"""üî¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.model_id}:

–ó–∞–∫–æ–Ω/–ü—Ä–∏–Ω—Ü–∏–ø: {selected_law}

**–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:**
{selected_law} —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ {area}.

**–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:**
1. **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å** - –ø—Ä–∏–º–µ–Ω–∏–º –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö
2. **–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞** - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ
3. **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ** - –æ–±—ä—è—Å–Ω–µ–Ω —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏
4. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ** - —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

**–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
- –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∞–≤—Ç–æ—Ä—ã
- –ü—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—É–∫–∏
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã

**–°–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–∫–æ–Ω–∞–º–∏:**
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏
- –û–±–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Å—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
- –ì—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏

üî¨ –ó–∞–∫–æ–Ω—ã –ø—Ä–∏—Ä–æ–¥—ã - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –í—Å–µ–ª–µ–Ω–Ω–æ–π."""
    
    async def _handle_experiment_query(self, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–± —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö"""
        experiments = [
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –†–µ–∑–µ—Ä—Ñ–æ—Ä–¥–∞",
            "–û–ø—ã—Ç –Æ–Ω–≥–∞ —Å –¥–≤—É–º—è —â–µ–ª—è–º–∏",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ú–∞–π–∫–µ–ª—å—Å–æ–Ω–∞-–ú–æ—Ä–ª–∏",
            "–û–ø—ã—Ç –ü–∞–≤–ª–æ–≤–∞ —Å —É—Å–ª–æ–≤–Ω—ã–º–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∞–º–∏",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ú–∏–ª–ª–µ—Ä–∞-–Æ—Ä–∏",
            "–û–ø—ã—Ç –ì–∞–ª–∏–ª–µ—è —Å –ø–∞–¥–∞—é—â–∏–º–∏ —Ç–µ–ª–∞–º–∏",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ö–∞–≤–µ–Ω–¥–∏—à–∞",
            "–û–ø—ã—Ç –§–∞—Ä–∞–¥–µ—è —Å —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∏–Ω–¥—É–∫—Ü–∏–µ–π"
        ]
        
        selected_experiment = experiments[hash(query) % len(experiments)]
        
        return f"""üî¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.model_id}:

–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {selected_experiment}

**–¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:**
{selected_experiment} –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –Ω–∞—É–∫–∏.

**–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è:**
1. **–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã** - —á–µ—Ç–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
2. **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ** - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã
3. **–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ** - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π
4. **–ê–Ω–∞–ª–∏–∑** - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
5. **–í—ã–≤–æ–¥—ã** - –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã
- –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è

**–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—É–∫–∏:**
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–π
- –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
- –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å

**–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏:**
- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π
- –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
- –ë–æ–ª—å—à–∏–µ –Ω–∞—É—á–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

üî¨ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç - —ç—Ç–æ –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–∏—Ä–æ–¥–µ."""
    
    async def _handle_history_query(self, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—É–∫–∏"""
        scientists = [
            "–ò—Å–∞–∞–∫ –ù—å—é—Ç–æ–Ω",
            "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω", 
            "–ú–∞—Ä–∏—è –ö—é—Ä–∏",
            "–ß–∞—Ä–ª—å–∑ –î–∞—Ä–≤–∏–Ω",
            "–î–º–∏—Ç—Ä–∏–π –ú–µ–Ω–¥–µ–ª–µ–µ–≤",
            "–ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞",
            "–ì–∞–ª–∏–ª–µ–æ –ì–∞–ª–∏–ª–µ–π",
            "–õ—É–∏ –ü–∞—Å—Ç–µ—Ä"
        ]
        
        selected_scientist = scientists[hash(query) % len(scientists)]
        
        return f"""üî¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.model_id}:

–£—á–µ–Ω—ã–π: {selected_scientist}

**–ë–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:**
{selected_scientist} - –≤—ã–¥–∞—é—â–∏–π—Å—è —É—á–µ–Ω—ã–π, –≤–Ω–µ—Å—à–∏–π –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—É–∫–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
1. **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã** - —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–æ—Ä–∏–∏
2. **–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è** - –≤–∞–∂–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
3. **–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
4. **–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∫–ª–∞–¥—ã** - –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã

**–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
- –≠–ø–æ—Ö–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
- –ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∏–∫–∏
- –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—É–∫–∏
- –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –∏ –Ω–∞–≥—Ä–∞–¥—ã

**–ù–∞—Å–ª–µ–¥–∏–µ:**
- –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞—É–∫—É
- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏–π –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
- –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π

**–¶–∏—Ç–∞—Ç—ã –∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è:**
- –ó–Ω–∞–º–µ–Ω–∏—Ç—ã–µ –∏–∑—Ä–µ—á–µ–Ω–∏—è
- –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
- –°–æ–≤–µ—Ç—ã –º–æ–ª–æ–¥—ã–º —É—á–µ–Ω—ã–º
- –í–∑–≥–ª—è–¥—ã –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É –Ω–∞—É–∫–∏

üî¨ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—É–∫–∏ - —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–∑–Ω–∞–Ω–∏—è."""
    
    async def _handle_general_material_query(self, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        scientific_principles = [
            "–ü—Ä–∏–Ω—Ü–∏–ø –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏",
            "–ü—Ä–∏–Ω—Ü–∏–ø —Å–∏–º–º–µ—Ç—Ä–∏–∏",
            "–ü—Ä–∏–Ω—Ü–∏–ø –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
            "–ü—Ä–∏–Ω—Ü–∏–ø —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
            "–ü—Ä–∏–Ω—Ü–∏–ø –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "–ü—Ä–∏–Ω—Ü–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏",
            "–ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "–ü—Ä–∏–Ω—Ü–∏–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
        ]
        
        selected_principle = scientific_principles[hash(query) % len(scientific_principles)]
        
        return f"""üî¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {self.model_id}:

–ù–∞—É—á–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø: {selected_principle}

**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
{selected_principle} —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–º, –ª–µ–∂–∞—â–∏–º –≤ –æ—Å–Ω–æ–≤–µ 
–Ω–∞—É—á–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞.

**–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:**
1. **–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞** - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏
2. **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ** - –æ–±—ä—è—Å–Ω–µ–Ω —Ç–µ–æ—Ä–∏—è–º–∏
3. **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å** - –ø—Ä–∏–º–µ–Ω–∏–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
4. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å** - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
- –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è

**–°–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏:**
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–∫–æ–Ω–∞–º–∏
- –û–±–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Å—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
- –ì—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏

**–†–∞–∑–≤–∏—Ç–∏–µ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ:**
- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
- –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è

üî¨ –ù–∞—É—á–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –∫–æ–º–ø–∞—Å –≤ –æ–∫–µ–∞–Ω–µ –∑–Ω–∞–Ω–∏–π."""


# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö 60 –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
def create_material_models() -> List[MaterialBaseModel]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö 60 –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    models = []
    
    # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (20)
    physics_specializations = [
        "classical_mechanics", "quantum_mechanics", "thermodynamics", "electromagnetism",
        "optics", "acoustics", "fluid_mechanics", "solid_state_physics",
        "nuclear_physics", "particle_physics", "astrophysics", "cosmology",
        "relativity", "statistical_physics", "plasma_physics", "biophysics",
        "geophysics", "atmospheric_physics", "medical_physics", "engineering_physics"
    ]
    
    for i, spec in enumerate(physics_specializations, 1):
        model_id = f"mozgach108_material_{i:02d}"
        model = MaterialBaseModel(model_id, spec)
        models.append(model)
    
    # –•–∏–º–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (15)
    chemistry_specializations = [
        "organic_chemistry", "inorganic_chemistry", "physical_chemistry", "analytical_chemistry",
        "biochemistry", "polymer_chemistry", "materials_chemistry", "environmental_chemistry",
        "medicinal_chemistry", "computational_chemistry", "electrochemistry", "photochemistry",
        "catalysis", "surface_chemistry", "nuclear_chemistry"
    ]
    
    for i, spec in enumerate(chemistry_specializations, 21):
        model_id = f"mozgach108_material_{i:02d}"
        model = MaterialBaseModel(model_id, spec)
        models.append(model)
    
    # –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (15)
    biology_specializations = [
        "molecular_biology", "cell_biology", "genetics", "evolutionary_biology",
        "ecology", "physiology", "anatomy", "microbiology",
        "botany", "zoology", "marine_biology", "conservation_biology",
        "bioinformatics", "synthetic_biology", "systems_biology"
    ]
    
    for i, spec in enumerate(biology_specializations, 36):
        model_id = f"mozgach108_material_{i:02d}"
        model = MaterialBaseModel(model_id, spec)
        models.append(model)
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (10)
    mathematics_specializations = [
        "algebra", "geometry", "analysis", "topology",
        "statistics", "probability", "number_theory", "combinatorics",
        "differential_equations", "mathematical_physics"
    ]
    
    for i, spec in enumerate(mathematics_specializations, 51):
        model_id = f"mozgach108_material_{i:02d}"
        model = MaterialBaseModel(model_id, spec)
        models.append(model)
    
    return models
