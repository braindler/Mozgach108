"""
–î–æ–º–µ–Ω—ã –∑–Ω–∞–Ω–∏–π mozgach108 - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 108 —Å—Ñ–µ—Ä–∞–º–∏ –∑–Ω–∞–Ω–∏–π
"""

import asyncio
import logging
import re
from typing import Dict, List, Set, Any, Optional, Tuple
from dataclasses import dataclass
from pathlib import Path
import json

logger = logging.getLogger(__name__)


@dataclass
class DomainInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ –∑–Ω–∞–Ω–∏–π"""
    domain_id: str
    name: str
    description: str
    keywords: List[str]
    weight: float
    model_count: int
    specialization_level: float


class KnowledgeDomains:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞–º–∏ –∑–Ω–∞–Ω–∏–π –¥–ª—è 108 –º–æ–¥–µ–ª–µ–π
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ
    –¥–æ–º–µ–Ω—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π.
    """
    
    def __init__(self, domains_config_path: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π
        
        Args:
            domains_config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤
        """
        self.domains: Dict[str, DomainInfo] = {}
        self.active_domains: Set[str] = set()
        self.domain_keywords: Dict[str, List[str]] = {}
        self.spiritual_keywords: Set[str] = set()
        self.programming_keywords: Set[str] = set()
        self.material_keywords: Set[str] = set()
        self.quantum_keywords: Set[str] = set()
        
        self._load_domain_definitions()
        
        logger.info("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π...")
    
    def _load_domain_definitions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π"""
        logger.info("üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–æ–º–µ–Ω–æ–≤...")
        
        # –î—É—Ö–æ–≤–Ω–∞—è —Å—Ñ–µ—Ä–∞ (58 –º–æ–¥–µ–ª–µ–π)
        spiritual_domains = self._create_spiritual_domains()
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞ (60 –º–æ–¥–µ–ª–µ–π) 
        material_domains = self._create_material_domains()
        
        # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (38 –º–æ–¥–µ–ª–µ–π)
        programming_domains = self._create_programming_domains()
        
        # –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (12 –º–æ–¥–µ–ª–µ–π)
        quantum_domains = self._create_quantum_domains()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        all_domains = {
            **spiritual_domains,
            **material_domains, 
            **programming_domains,
            **quantum_domains
        }
        
        self.domains = all_domains
        self._build_keyword_indices()
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.domains)} –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π")
    
    def _create_spiritual_domains(self) -> Dict[str, DomainInfo]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –¥—É—Ö–æ–≤–Ω–æ–π —Å—Ñ–µ—Ä—ã"""
        spiritual_domains = {}
        
        spiritual_categories = [
            ("vedic_knowledge", "–í–µ–¥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞–Ω–∏–µ", [
                "–≤–µ–¥—ã", "—É–ø–∞–Ω–∏—à–∞–¥—ã", "–±—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç–∞", "—Ä–∞–º–∞—è–Ω–∞", "–º–∞—Ö–∞–±—Ö–∞—Ä–∞—Ç–∞",
                "—Å–∞–Ω—Å–∫—Ä–∏—Ç", "–º–∞–Ω—Ç—Ä–∞", "–π–æ–≥–∞", "–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–¥—Ö–∞—Ä–º–∞", "–∫–∞—Ä–º–∞"
            ]),
            ("buddhist_philosophy", "–ë—É–¥–¥–∏–π—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", [
                "–±—É–¥–¥–∏–∑–º", "–¥—Ö–∞—Ä–º–∞", "—Å–∞–Ω–≥—Ö–∞", "–±—É–¥–¥–∞", "–Ω–∏—Ä–≤–∞–Ω–∞", "–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ",
                "–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–≤–∏–ø–∞—Å—Å–∞–Ω–∞", "–¥–∑–µ–Ω", "—Ç–∏–±–µ—Ç", "–¥–∞–ª–∞–π-–ª–∞–º–∞"
            ]),
            ("christian_mysticism", "–•—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–∏–π –º–∏—Å—Ç–∏—Ü–∏–∑–º", [
                "—Ö—Ä–∏—Å—Ç–∏–∞–Ω—Å—Ç–≤–æ", "–ø—Ä–∞–≤–æ—Å–ª–∞–≤–∏–µ", "–∫–∞—Ç–æ–ª–∏—Ü–∏–∑–º", "–ø—Ä–æ—Ç–µ—Å—Ç–∞–Ω—Ç–∏–∑–º", 
                "–∏—Å–∏—Ö–∞–∑–º", "–º–æ–ª–∏—Ç–≤–∞", "–ø–æ—Å—Ç", "—Ç–∞–∏–Ω—Å—Ç–≤–∞", "—Å–≤—è—Ç—ã–µ", "–∞–Ω–≥–µ–ª—ã"
            ]),
            ("islamic_sufism", "–ò—Å–ª–∞–º—Å–∫–∏–π —Å—É—Ñ–∏–∑–º", [
                "–∏—Å–ª–∞–º", "—Å—É—Ñ–∏–∑–º", "–∫–æ—Ä–∞–Ω", "—Ö–∞–¥–∏—Å", "–Ω–∞–º–∞–∑", "—Ö–∞–¥–∂", "—Ä–∞–º–∞–¥–∞–Ω",
                "–¥–µ—Ä–≤–∏—à", "—Ç–∞—Ä–∏–∫–∞—Ç", "–∑–∏–∫—Ä", "–∞–ª–ª–∞—Ö"
            ]),
            ("esoteric_traditions", "–≠–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏", [
                "—ç–∑–æ—Ç–µ—Ä–∏–∫–∞", "–æ–∫–∫—É–ª—å—Ç–∏–∑–º", "–≥–µ—Ä–º–µ—Ç–∏–∑–º", "–∫–∞–±–±–∞–ª–∞", "–∞–ª—Ö–∏–º–∏—è",
                "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "—Ç–∞—Ä–æ", "—Ä—É–Ω–≤", "–º–∞–≥–∏—è", "—Ä–∏—Ç—É–∞–ª"
            ]),
            ("meditation_practices", "–ü—Ä–∞–∫—Ç–∏–∫–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏", [
                "–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "–≤–∏–ø–∞—Å—Å–∞–Ω–∞", "–¥–∑–µ–Ω", "–º–∞–Ω—Ç—Ä–∞",
                "–ø—Ä–∞–Ω–∞—è–º–∞", "—á–∞–∫—Ä–∞", "–∫—É–Ω–¥–∞–ª–∏–Ω–∏", "—Å–∞–º–∞–¥—Ö–∏", "–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ"
            ]),
            ("sacred_geometry", "–°–≤—è—â–µ–Ω–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", [
                "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "—Ñ—Ä–∞–∫—Ç–∞–ª—ã", "–∑–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ", "–º–∞–Ω–¥–∞–ª–∞", "—è–Ω—Ç—Ä–∞",
                "–ø–∏—Ñ–∞–≥–æ—Ä", "–ø–ª–∞—Ç–æ–Ω", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "—Ö—Ä–∞–º", "—Å–æ–±–æ—Ä"
            ]),
            ("ancient_wisdom", "–î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å", [
                "–¥—Ä–µ–≤–Ω–æ—Å—Ç—å", "–º—É–¥—Ä–æ—Å—Ç—å", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", "–≥–Ω–æ–∑–∏—Å", "—Ç—Ä–∞–¥–∏—Ü–∏—è",
                "–ø–æ—Å–≤—è—â–µ–Ω–∏–µ", "–º–∏—Å—Ç–µ—Ä–∏–∏", "—à–∞–º–∞–Ω", "–¥—Ä—É–∏–¥", "–∂—Ä–µ—Ü"
            ])
        ]
        
        for i, (domain_id, name, keywords) in enumerate(spiritual_categories):
            spiritual_domains[f"spiritual_{domain_id}"] = DomainInfo(
                domain_id=f"spiritual_{domain_id}",
                name=name,
                description=f"–î–æ–º–µ–Ω –¥—É—Ö–æ–≤–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π: {name}",
                keywords=keywords,
                weight=0.8 + i * 0.02,  # –í—ã—Å–æ–∫–∏–π –≤–µ—Å –¥–ª—è –¥—É—Ö–æ–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
                model_count=7 + i,  # –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –Ω–∞ –¥–æ–º–µ–Ω
                specialization_level=0.9
            )
            self.spiritual_keywords.update(keywords)
        
        return spiritual_domains
    
    def _create_material_domains(self) -> Dict[str, DomainInfo]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã"""
        material_domains = {}
        
        material_categories = [
            ("physics_classical", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ñ–∏–∑–∏–∫–∞", [
                "—Ñ–∏–∑–∏–∫–∞", "–º–µ—Ö–∞–Ω–∏–∫–∞", "—Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–º–∞–≥–Ω–µ—Ç–∏–∑–º",
                "–æ–ø—Ç–∏–∫–∞", "–∞–∫—É—Å—Ç–∏–∫–∞", "–Ω—å—é—Ç–æ–Ω", "—ç–π–Ω—à—Ç–µ–π–Ω", "–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
            ]),
            ("mathematics", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", [
                "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–∞–ª–≥–µ–±—Ä–∞", "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–∞–Ω–∞–ª–∏–∑", "—Ç–æ–ø–æ–ª–æ–≥–∏—è",
                "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", "–¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è", "—á–∏—Å–ª–∞", "—Ñ—É–Ω–∫—Ü–∏–∏"
            ]),
            ("chemistry", "–•–∏–º–∏—è", [
                "—Ö–∏–º–∏—è", "—ç–ª–µ–º–µ–Ω—Ç—ã", "—Ä–µ–∞–∫—Ü–∏–∏", "–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è", "–Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è",
                "–±–∏–æ—Ö–∏–º–∏—è", "–º–æ–ª–µ–∫—É–ª—ã", "–∞—Ç–æ–º—ã", "–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è", "–∫–∞—Ç–∞–ª–∏–∑"
            ]),
            ("biology", "–ë–∏–æ–ª–æ–≥–∏—è", [
                "–±–∏–æ–ª–æ–≥–∏—è", "—ç–≤–æ–ª—é—Ü–∏—è", "–≥–µ–Ω–µ—Ç–∏–∫–∞", "—ç–∫–æ–ª–æ–≥–∏—è", "–±–æ—Ç–∞–Ω–∏–∫–∞",
                "–∑–æ–æ–ª–æ–≥–∏—è", "–∞–Ω–∞—Ç–æ–º–∏—è", "—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è", "–∫–ª–µ—Ç–∫–∞", "–æ—Ä–≥–∞–Ω–∏–∑–º"
            ]),
            ("engineering", "–ò–Ω–∂–µ–Ω–µ—Ä–∏—è", [
                "–∏–Ω–∂–µ–Ω–µ—Ä–∏—è", "–º–µ—Ö–∞–Ω–∏–∫–∞", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–º–∞—à–∏–Ω—ã",
                "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏", "—Å–∞–º–æ–ª–µ—Ç—ã", "–∫–æ—Ä–∞–±–ª–∏", "—Ä–æ–±–æ—Ç—ã", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
            ]),
            ("medicine", "–ú–µ–¥–∏—Ü–∏–Ω–∞", [
                "–º–µ–¥–∏—Ü–∏–Ω–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–±–æ–ª–µ–∑–Ω–∏", "–ª–µ—á–µ–Ω–∏–µ", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                "—Ö–∏—Ä—É—Ä–≥–∏—è", "—Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è", "–∞–Ω–∞—Ç–æ–º–∏—è", "—Ç–µ—Ä–∞–ø–∏—è", "–≤—Ä–∞—á"
            ]),
            ("economics", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", [
                "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—Ñ–∏–Ω–∞–Ω—Å—ã", "–¥–µ–Ω—å–≥–∏", "–±–∞–Ω–∫–∏", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
                "—Ä—ã–Ω–æ–∫", "—Ç–æ—Ä–≥–æ–≤–ª—è", "–±–∏–∑–Ω–µ—Å", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"
            ]),
            ("education", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", [
                "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–æ–±—É—á–µ–Ω–∏–µ", "—à–∫–æ–ª–∞", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–ø–µ–¥–∞–≥–æ–≥–∏–∫–∞",
                "–º–µ—Ç–æ–¥–∏–∫–∞", "—É—á–∏—Ç–µ–ª—å", "—Å—Ç—É–¥–µ–Ω—Ç", "–∑–Ω–∞–Ω–∏—è", "–Ω–∞–≤—ã–∫–∏"
            ])
        ]
        
        for i, (domain_id, name, keywords) in enumerate(material_categories):
            material_domains[f"material_{domain_id}"] = DomainInfo(
                domain_id=f"material_{domain_id}",
                name=name,
                description=f"–î–æ–º–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π: {name}",
                keywords=keywords,
                weight=0.6 + i * 0.03,
                model_count=7 + i,
                specialization_level=0.8
            )
            self.material_keywords.update(keywords)
        
        return material_domains
    
    def _create_programming_domains(self) -> Dict[str, DomainInfo]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        programming_domains = {}
        
        programming_categories = [
            ("languages", "–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", [
                "python", "javascript", "java", "c++", "c#", "go", "rust",
                "swift", "kotlin", "typescript", "php", "ruby", "scala"
            ]),
            ("web_development", "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", [
                "html", "css", "react", "vue", "angular", "node.js", "express",
                "django", "flask", "spring", "laravel", "wordpress", "frontend", "backend"
            ]),
            ("data_science", "–ù–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö", [
                "–¥–∞–Ω–Ω—ã–µ", "–∞–Ω–∞–ª–∏–∑", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "ai",
                "pandas", "numpy", "sklearn", "tensorflow", "pytorch", "jupyter"
            ]),
            ("databases", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", [
                "sql", "postgresql", "mysql", "mongodb", "redis", "elasticsearch",
                "oracle", "sqlite", "nosql", "orm", "–º–∏–≥—Ä–∞—Ü–∏–∏", "–∏–Ω–¥–µ–∫—Å—ã"
            ]),
            ("devops", "DevOps", [
                "docker", "kubernetes", "jenkins", "gitlab", "github", "ci/cd",
                "aws", "azure", "google cloud", "terraform", "ansible", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            ]),
            ("mobile_development", "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", [
                "android", "ios", "flutter", "react native", "swift", "kotlin",
                "xamarin", "cordova", "ionic", "–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            ]),
            ("algorithms", "–ê–ª–≥–æ—Ä–∏—Ç–º—ã", [
                "–∞–ª–≥–æ—Ä–∏—Ç–º—ã", "—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö", "—Å–ª–æ–∂–Ω–æ—Å—Ç—å", "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
                "–ø–æ–∏—Å–∫", "–≥—Ä–∞—Ñ—ã", "–¥–µ—Ä–µ–≤—å—è", "—Ö—ç—à", "–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ]),
            ("security", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", [
                "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                "ssl", "oauth", "csrf", "xss", "sql injection", "penetration testing"
            ])
        ]
        
        for i, (domain_id, name, keywords) in enumerate(programming_categories):
            programming_domains[f"programming_{domain_id}"] = DomainInfo(
                domain_id=f"programming_{domain_id}",
                name=name,
                description=f"–î–æ–º–µ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {name}",
                keywords=keywords,
                weight=0.7 + i * 0.02,
                model_count=4 + i,
                specialization_level=0.95
            )
            self.programming_keywords.update(keywords)
        
        return programming_domains
    
    def _create_quantum_domains(self) -> Dict[str, DomainInfo]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
        quantum_domains = {}
        
        quantum_categories = [
            ("quantum_computing", "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", [
                "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", "–∫—É–±–∏—Ç", "—Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è", "–∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å",
                "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã", "—à–æ—Ä", "–≥—Ä–æ–≤–µ—Ä", "–∫–≤–∞–Ω—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫"
            ]),
            ("quantum_physics", "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞", [
                "–∫–≤–∞–Ω—Ç–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞", "–≤–æ–ª–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è", "–ø—Ä–∏–Ω—Ü–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏",
                "—ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è", "–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏", "–∫–æ–ø–µ–Ω–≥–∞–≥–µ–Ω—Å–∫–∞—è", "–º–Ω–æ–≥–æ–º–∏—Ä–æ–≤–∞—è"
            ]),
            ("quantum_information", "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", [
                "–∫–≤–∞–Ω—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è", "–∫–≤–∞–Ω—Ç–æ–≤–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è",
                "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã", "–∫–≤–∞–Ω—Ç–æ–≤–∞—è —Å–≤—è–∑—å", "–∫–≤–∞–Ω—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
            ])
        ]
        
        for i, (domain_id, name, keywords) in enumerate(quantum_categories):
            quantum_domains[f"quantum_{domain_id}"] = DomainInfo(
                domain_id=f"quantum_{domain_id}",
                name=name,
                description=f"–î–æ–º–µ–Ω –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {name}",
                keywords=keywords,
                weight=1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤
                model_count=4,
                specialization_level=1.0
            )
            self.quantum_keywords.update(keywords)
        
        return quantum_domains
    
    def _build_keyword_indices(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        logger.debug("üîç –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")
        
        for domain_id, domain_info in self.domains.items():
            self.domain_keywords[domain_id] = domain_info.keywords
        
        logger.debug(f"‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è {len(self.domain_keywords)} –¥–æ–º–µ–Ω–æ–≤")
    
    async def load_domains(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ–º–µ–Ω–æ–≤"""
        logger.info("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π...")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.active_domains = set(self.domains.keys())
        
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(self.active_domains)} –¥–æ–º–µ–Ω–æ–≤")
    
    async def analyze_query(self, query: str, domain_hint: Optional[str] = None) -> Dict[str, float]:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            domain_hint: –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–º –¥–æ–º–µ–Ω–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –≤–µ—Å–∞–º–∏ –¥–æ–º–µ–Ω–æ–≤
        """
        logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {query[:100]}...")
        
        domain_weights = {}
        query_lower = query.lower()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        normalized_query = self._normalize_query(query_lower)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        keyword_scores = self._analyze_keywords(normalized_query)
        
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        semantic_scores = await self._semantic_analysis(normalized_query)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        for domain_id in self.active_domains:
            keyword_score = keyword_scores.get(domain_id, 0.0)
            semantic_score = semantic_scores.get(domain_id, 0.0)
            
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
            combined_score = 0.6 * keyword_score + 0.4 * semantic_score
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–æ–º–µ–Ω–∞
            if domain_hint and domain_hint in domain_id:
                combined_score *= 1.5
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–µ—Å –¥–æ–º–µ–Ω–∞
            domain_info = self.domains[domain_id]
            final_score = combined_score * domain_info.weight
            
            if final_score > 0.1:  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                domain_weights[domain_id] = final_score
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
        total_weight = sum(domain_weights.values())
        if total_weight > 0:
            domain_weights = {
                k: v / total_weight for k, v in domain_weights.items()
            }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤
        sorted_domains = sorted(
            domain_weights.items(), 
            key=lambda x: x[1], 
            reverse=True
        )[:5]
        
        result = dict(sorted_domains)
        
        logger.debug(f"üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–æ–º–µ–Ω—ã: {list(result.keys())}")
        return result
    
    def _normalize_query(self, query: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized = re.sub(r'[^\w\s]', ' ', query)
        normalized = ' '.join(normalized.split())
        return normalized
    
    def _analyze_keywords(self, query: str) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ"""
        keyword_scores = {}
        query_words = set(query.split())
        
        for domain_id, keywords in self.domain_keywords.items():
            score = 0.0
            domain_keywords = set(keyword.lower() for keyword in keywords)
            
            # –ü—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            direct_matches = query_words.intersection(domain_keywords)
            score += len(direct_matches) * 2.0
            
            # –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for query_word in query_words:
                for keyword in domain_keywords:
                    if query_word in keyword or keyword in query_word:
                        if len(query_word) > 3 and len(keyword) > 3:
                            score += 0.5
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ–º–µ–Ω–∞
            if len(domain_keywords) > 0:
                score = score / len(domain_keywords)
            
            keyword_scores[domain_id] = score
        
        return keyword_scores
    
    async def _semantic_analysis(self, query: str) -> Dict[str, float]:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        semantic_scores = {}
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑
        spiritual_patterns = [
            r'(–¥—É—Ö–æ–≤–Ω|–º–µ–¥–∏—Ç–∞—Ü|–π–æ–≥|–±—É–¥–¥–∏–∑–º|—Ö—Ä–∏—Å—Ç–∏–∞–Ω—Å—Ç–≤|–∏—Å–ª–∞–º|–º–æ–ª–∏—Ç–≤|–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω)',
            r'(–≤–µ–¥—ã|—É–ø–∞–Ω–∏—à–∞–¥—ã|–∫–æ—Ä–∞–Ω|–±–∏–±–ª–∏—è|–≥–∏—Ç–∞|–¥—Ö–∞—Ä–º|–∫–∞—Ä–º)',
            r'(–º–∞–Ω—Ç—Ä|—á–∞–∫—Ä|–∫—É–Ω–¥–∞–ª–∏–Ω–∏|—Å–∞–º–∞–¥—Ö–∏|–Ω–∏—Ä–≤–∞–Ω|—Å–∞—Ç–æ—Ä)'
        ]
        
        programming_patterns = [
            r'(–ø—Ä–æ–≥—Ä–∞–º|–∫–æ–¥|–∞–ª–≥–æ—Ä–∏—Ç–º|—Ñ—É–Ω–∫—Ü|–∫–ª–∞—Å—Å|–º–µ—Ç–æ–¥|–ø–µ—Ä–µ–º–µ–Ω–Ω)',
            r'(python|javascript|java|react|django|sql|git)',
            r'(—Ä–∞–∑—Ä–∞–±–æ—Ç–∫|–≤–µ–±|–º–æ–±–∏–ª—å–Ω|—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥|–±—ç–∫–µ–Ω–¥|fullstack)'
        ]
        
        quantum_patterns = [
            r'(–∫–≤–∞–Ω—Ç–æ–≤|–∫—É–±–∏—Ç|—Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü|–∑–∞–ø—É—Ç–∞–Ω–Ω|–¥–µ–∫–æ–≥–µ—Ä–µ–Ω—Ü)',
            r'(–≤–æ–ª–Ω–æ–≤ —Ñ—É–Ω–∫—Ü|–ø—Ä–∏–Ω—Ü–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω|—ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª)',
            r'(–∫–≤–∞–Ω—Ç–æ–≤ –≤—ã—á–∏—Å–ª–µ–Ω|–∫–≤–∞–Ω—Ç–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä|–∫–≤–∞–Ω—Ç–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º)'
        ]
        
        material_patterns = [
            r'(—Ñ–∏–∑–∏–∫|–º–∞—Ç–µ–º–∞—Ç–∏–∫|—Ö–∏–º–∏—è|–±–∏–æ–ª–æ–≥|–∏–Ω–∂–µ–Ω–µ—Ä|–º–µ–¥–∏—Ü–∏–Ω)',
            r'(—ç–∫–æ–Ω–æ–º–∏–∫|—Ñ–∏–Ω–∞–Ω—Å|–æ–±—Ä–∞–∑–æ–≤–∞–Ω|–Ω–∞—É–∫|–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω)',
            r'(–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω|–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫|—Ä–µ–∞–ª—å–Ω|–∫–æ–Ω–∫—Ä–µ—Ç–Ω|—Ç–µ—Ö–Ω–∏—á)'
        ]
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        for domain_id in self.domains.keys():
            score = 0.0
            
            if domain_id.startswith('spiritual_'):
                for pattern in spiritual_patterns:
                    if re.search(pattern, query):
                        score += 1.0
            
            elif domain_id.startswith('programming_'):
                for pattern in programming_patterns:
                    if re.search(pattern, query):
                        score += 1.0
            
            elif domain_id.startswith('quantum_'):
                for pattern in quantum_patterns:
                    if re.search(pattern, query):
                        score += 1.0
                        
            elif domain_id.startswith('material_'):
                for pattern in material_patterns:
                    if re.search(pattern, query):
                        score += 1.0
            
            semantic_scores[domain_id] = score
        
        return semantic_scores
    
    def get_domain_info(self, domain_id: str) -> Optional[DomainInfo]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ"""
        return self.domains.get(domain_id)
    
    def get_active_domains(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤"""
        return list(self.active_domains)
    
    def activate_domain(self, domain_id: str) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω"""
        if domain_id in self.domains:
            self.active_domains.add(domain_id)
            logger.info(f"‚úÖ –î–æ–º–µ–Ω {domain_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return True
        return False
    
    def deactivate_domain(self, domain_id: str) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω"""
        if domain_id in self.active_domains:
            self.active_domains.remove(domain_id)
            logger.info(f"‚ùå –î–æ–º–µ–Ω {domain_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return True
        return False
    
    def get_domains_by_category(self, category: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return [
            domain_id for domain_id in self.domains.keys()
            if domain_id.startswith(f"{category}_")
        ]
    
    def get_domain_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–º–µ–Ω–æ–≤"""
        stats = {
            "total_domains": len(self.domains),
            "active_domains": len(self.active_domains),
            "categories": {
                "spiritual": len(self.get_domains_by_category("spiritual")),
                "material": len(self.get_domains_by_category("material")),
                "programming": len(self.get_domains_by_category("programming")),
                "quantum": len(self.get_domains_by_category("quantum"))
            },
            "total_keywords": sum(len(keywords) for keywords in self.domain_keywords.values()),
            "specialization_levels": {
                domain_id: info.specialization_level 
                for domain_id, info in self.domains.items()
            }
        }
        
        return stats
