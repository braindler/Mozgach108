"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π mozgach108 - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 108 –º–æ–¥–µ–ª—è–º–∏
"""

import asyncio
import logging
from typing import Dict, List, Optional, Set, Any
from dataclasses import dataclass
from pathlib import Path
import json
import hashlib

from .models.model_factory import model_factory

logger = logging.getLogger(__name__)


@dataclass
class ModelInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
    model_id: str
    domain: str
    size_mb: int
    load_priority: int
    quantum_signature: str
    is_loaded: bool = False
    load_time: float = 0.0


class ModelManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 108 –∫–≤–∞–Ω—Ç–æ–≤–æ-–∑–∞–ø—É—Ç–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    
    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É, –≤—ã–≥—Ä—É–∑–∫—É –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã.
    """
    
    def __init__(self, models_dir: str = "models"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        
        Args:
            models_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏
        """
        self.models_dir = Path(models_dir)
        self.loaded_models: Dict[str, Any] = {}
        self.model_registry: Dict[str, ModelInfo] = {}
        self.max_memory_mb = 8192  # 8GB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.current_memory_usage = 0
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏
        self.critical_models = [
            "mozgach108_general_01",
            "mozgach108_quantum_core", 
            "mozgach108_spiritual_01",
            "mozgach108_programming_01"
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –º–æ–¥–µ–ª–µ–π
        self.model_factory = model_factory
        self.model_factory.create_all_models()
        
        self._initialize_registry()
    
    def _initialize_registry(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –≤—Å–µ—Ö 108 –º–æ–¥–µ–ª–µ–π"""
        logger.info("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –º–æ–¥–µ–ª–µ–π...")
        
        # –î–æ–º–µ–Ω—ã –∑–Ω–∞–Ω–∏–π –∏ –∏—Ö –º–æ–¥–µ–ª–∏
        domains = {
            "programming": 38,  # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            "spiritual": 58,    # –î—É—Ö–æ–≤–Ω–∞—è —Å—Ñ–µ—Ä–∞  
            "material": 60,     # –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞
            "quantum": 12       # –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        }
        
        total_models = 0
        for domain, count in domains.items():
            for i in range(1, count + 1):
                model_id = f"mozgach108_{domain}_{i:02d}"
                quantum_sig = self._generate_quantum_signature(model_id, domain)
                
                self.model_registry[model_id] = ModelInfo(
                    model_id=model_id,
                    domain=domain,
                    size_mb=self._estimate_model_size(domain),
                    load_priority=self._calculate_priority(model_id, domain),
                    quantum_signature=quantum_sig
                )
                total_models += 1
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 108 –º–æ–¥–µ–ª–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏
        special_models = [
            ("mozgach108_dune_harekrishna", "spiritual", 1),
            ("mozgach108_earth_harekrishna", "spiritual", 1), 
            ("mozgach108_3d_printing", "material", 1),
            ("mozgach108_slang_2025", "material", 1),
            ("mozgach108_education_spheres", "material", 1),
            ("mozgach108_personal_satellite", "material", 1),
            ("mozgach108_classical_geometry", "material", 1),
            ("mozgach108_fibonacci_math", "material", 1),
            ("mozgach108_classical_physics", "material", 1),
            ("mozgach108_fibonacci_physics", "material", 1)
        ]
        
        for model_id, domain, priority in special_models:
            if total_models < 108:
                quantum_sig = self._generate_quantum_signature(model_id, domain)
                self.model_registry[model_id] = ModelInfo(
                    model_id=model_id,
                    domain=domain,
                    size_mb=self._estimate_model_size(domain),
                    load_priority=priority,
                    quantum_signature=quantum_sig
                )
                total_models += 1
        
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {total_models} –º–æ–¥–µ–ª–µ–π")
    
    def _generate_quantum_signature(self, model_id: str, domain: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –º–æ–¥–µ–ª–∏"""
        signature_data = f"{model_id}:{domain}:quantum_entangled"
        return hashlib.sha256(signature_data.encode()).hexdigest()[:16]
    
    def _estimate_model_size(self, domain: str) -> int:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤ MB"""
        size_map = {
            "programming": 150,
            "spiritual": 120,
            "material": 130,
            "quantum": 200
        }
        return size_map.get(domain, 140)
    
    def _calculate_priority(self, model_id: str, domain: str) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
        if model_id in self.critical_models:
            return 1
        
        priority_map = {
            "quantum": 2,
            "programming": 3,
            "spiritual": 4,
            "material": 5
        }
        return priority_map.get(domain, 10)
    
    async def load_critical_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã"""
        logger.info("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π...")
        
        for model_id in self.critical_models:
            if model_id in self.model_registry:
                await self.load_model(model_id)
        
        logger.info("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    async def load_model(self, model_id: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
        
        Args:
            model_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        """
        if model_id in self.loaded_models:
            logger.debug(f"üì¶ –ú–æ–¥–µ–ª—å {model_id} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        
        if model_id not in self.model_registry:
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
            return False
        
        model_info = self.model_registry[model_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏
        if self.current_memory_usage + model_info.size_mb > self.max_memory_mb:
            await self._free_memory(model_info.size_mb)
        
        try:
            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {model_id}...")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞)
            await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            
            # –°–æ–∑–¥–∞–Ω–∏–µ "–º–æ–¥–µ–ª–∏" (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            mock_model = {
                "model_id": model_id,
                "domain": model_info.domain,
                "quantum_signature": model_info.quantum_signature,
                "parameters": f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ {model_id}",
                "loaded_at": asyncio.get_event_loop().time()
            }
            
            self.loaded_models[model_id] = mock_model
            model_info.is_loaded = True
            self.current_memory_usage += model_info.size_mb
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({model_info.size_mb}MB)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_id}: {e}")
            return False
    
    async def unload_model(self, model_id: str) -> bool:
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏"""
        if model_id not in self.loaded_models:
            return True
        
        try:
            model_info = self.model_registry[model_id]
            del self.loaded_models[model_id]
            model_info.is_loaded = False
            self.current_memory_usage -= model_info.size_mb
            
            logger.info(f"üì§ –ú–æ–¥–µ–ª—å {model_id} –≤—ã–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_id}: {e}")
            return False
    
    async def get_models_for_domains(self, domain_weights: Dict[str, float]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        
        Args:
            domain_weights: –í–µ—Å–∞ –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        """
        required_models = {}
        
        for domain, weight in domain_weights.items():
            if weight > 0.1:  # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤
                domain_models = [
                    model_id for model_id, info in self.model_registry.items()
                    if info.domain == domain and info.load_priority <= 5
                ]
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø-3 –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
                for model_id in sorted(domain_models, 
                                     key=lambda x: self.model_registry[x].load_priority)[:3]:
                    if await self.load_model(model_id):
                        required_models[model_id] = self.loaded_models[model_id]
        
        return required_models
    
    async def _free_memory(self, required_mb: int):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—É—Ç–µ–º –≤—ã–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        logger.info(f"üßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ {required_mb}MB –ø–∞–º—è—Ç–∏...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –Ω–∏–∑–∫–æ–µ —á–∏—Å–ª–æ)
        loaded_models_by_priority = sorted(
            [(model_id, self.model_registry[model_id]) 
             for model_id in self.loaded_models.keys()],
            key=lambda x: x[1].load_priority,
            reverse=True  # –í—ã–≥—Ä—É–∂–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –º–æ–¥–µ–ª–∏ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        )
        
        freed_memory = 0
        for model_id, model_info in loaded_models_by_priority:
            if model_id not in self.critical_models and freed_memory < required_mb:
                await self.unload_model(model_id)
                freed_memory += model_info.size_mb
    
    async def optimize_models(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π...")
        
        # –í—ã–≥—Ä—É–∂–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏
        current_time = asyncio.get_event_loop().time()
        for model_id, model in list(self.loaded_models.items()):
            if model_id not in self.critical_models:
                # –í—ã–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
                if current_time - model["loaded_at"] > 300:
                    await self.unload_model(model_id)
        
        logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def unload_all_models(self):
        """–í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π...")
        
        for model_id in list(self.loaded_models.keys()):
            await self.unload_model(model_id)
        
        logger.info("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –≤—ã–≥—Ä—É–∂–µ–Ω—ã")
    
    def get_loaded_models_info(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö"""
        return {
            model_id: {
                "domain": self.model_registry[model_id].domain,
                "size_mb": self.model_registry[model_id].size_mb,
                "priority": self.model_registry[model_id].load_priority,
                "quantum_signature": self.model_registry[model_id].quantum_signature
            }
            for model_id in self.loaded_models.keys()
        }
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        return {
            "total_models": len(self.model_registry),
            "loaded_models": len(self.loaded_models),
            "memory_usage_mb": self.current_memory_usage,
            "memory_limit_mb": self.max_memory_mb,
            "memory_usage_percent": (self.current_memory_usage / self.max_memory_mb) * 100
        }
