"""
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è mozgach108
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime

from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
import uvicorn

from src.mozgach108_system import Mozgach108System, QueryResponse
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="mozgach108 API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–∑ 108 –∫–≤–∞–Ω—Ç–æ–≤–æ-–∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π",
    version=config.get("system.version", "1.0.0"),
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
if config.get("api.cors_enabled", True):
    app.add_middleware(
        CORSMiddleware,
        allow_origins=config.get("security.allowed_origins", ["*"]),
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
mozgach_system: Optional[Mozgach108System] = None


# Pydantic –º–æ–¥–µ–ª–∏
class QueryRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞"""
    query: str = Field(..., description="–ó–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–µ", max_length=10000)
    domain_hint: Optional[str] = Field(None, description="–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –¥–æ–º–µ–Ω–µ –∑–Ω–∞–Ω–∏–π")
    include_metadata: bool = Field(False, description="–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç")


class BatchQueryRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    queries: List[str] = Field(..., description="–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤", max_items=100)
    domain_hints: Optional[List[str]] = Field(None, description="–ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ –¥–æ–º–µ–Ω–∞—Ö")
    include_metadata: bool = Field(False, description="–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç")


class QueryResponseModel(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞"""
    content: str
    confidence: float
    domain_weights: Dict[str, float]
    processing_time: float
    timestamp: str
    quantum_state: Optional[Dict[str, Any]] = None


class SystemStatsModel(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    total_queries: int
    total_processing_time: float
    average_processing_time: float
    success_rate: float
    loaded_models: int
    active_domains: int
    quantum_entanglement_strength: float
    memory_usage_mb: int


class HealthResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ health check"""
    status: str
    timestamp: str
    version: str
    uptime: float


# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
async def get_system() -> Mozgach108System:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    global mozgach_system
    
    if mozgach_system is None:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã mozgach108...")
        mozgach_system = Mozgach108System()
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(2)
    
    return mozgach_system


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@app.middleware("http")
async def log_requests(request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.now()
    
    response = await call_next(request)
    
    process_time = (datetime.now() - start_time).total_seconds()
    logger.info(f"{request.method} {request.url.path} - {response.status_code} - {process_time:.3f}s")
    
    return response


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "detail": str(exc) if config.get("system.debug", False) else "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        }
    )


# –ú–∞—Ä—à—Ä—É—Ç—ã API
@app.get("/", response_model=Dict[str, str])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç"""
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ mozgach108 API",
        "version": config.get("system.version", "1.0.0"),
        "description": "–°–∏—Å—Ç–µ–º–∞ –∏–∑ 108 –∫–≤–∞–Ω—Ç–æ–≤–æ-–∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π",
        "docs": "/docs"
    }


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        system = await get_system()
        stats = system.get_system_stats()
        
        return HealthResponse(
            status="healthy" if stats["loaded_models"] > 0 else "initializing",
            timestamp=datetime.now().isoformat(),
            version=config.get("system.version", "1.0.0"),
            uptime=stats.get("uptime", 0.0)
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return HealthResponse(
            status="unhealthy",
            timestamp=datetime.now().isoformat(),
            version=config.get("system.version", "1.0.0"),
            uptime=0.0
        )


@app.post("/query", response_model=QueryResponseModel)
async def query_endpoint(
    request: QueryRequest,
    system: Mozgach108System = Depends(get_system)
):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {request.query[:100]}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await system.query(request.query, request.domain_hint)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "content": response.content,
            "confidence": response.confidence,
            "domain_weights": response.domain_weights,
            "processing_time": response.processing_time,
            "timestamp": response.timestamp.isoformat()
        }
        
        if request.include_metadata:
            response_data["quantum_state"] = response.quantum_state
        
        return QueryResponseModel(**response_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/batch", response_model=List[QueryResponseModel])
async def batch_query_endpoint(
    request: BatchQueryRequest,
    system: Mozgach108System = Depends(get_system)
):
    """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        logger.info(f"üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(request.queries)} –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        responses = await system.batch_query(request.queries)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
        response_data = []
        for response in responses:
            data = {
                "content": response.content,
                "confidence": response.confidence,
                "domain_weights": response.domain_weights,
                "processing_time": response.processing_time,
                "timestamp": response.timestamp.isoformat()
            }
            
            if request.include_metadata:
                data["quantum_state"] = response.quantum_state
            
            response_data.append(QueryResponseModel(**data))
        
        return response_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/stats", response_model=SystemStatsModel)
async def get_stats(system: Mozgach108System = Depends(get_system)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        stats = system.get_system_stats()
        return SystemStatsModel(**stats)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/optimize")
async def optimize_system(
    background_tasks: BackgroundTasks,
    system: Mozgach108System = Depends(get_system)
):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"""
    try:
        logger.info("üîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(system.optimize_system)
        
        return {"message": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/domains")
async def get_domains(system: Mozgach108System = Depends(get_system)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –∑–Ω–∞–Ω–∏–π"""
    try:
        domains_info = system.knowledge_domains.get_domain_statistics()
        return domains_info
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/models")
async def get_models(system: Mozgach108System = Depends(get_system)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö"""
    try:
        models_info = system.model_manager.get_loaded_models_info()
        memory_stats = system.model_manager.get_memory_stats()
        
        return {
            "loaded_models": models_info,
            "memory_stats": memory_stats
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/memory")
async def get_memory_stats(system: Mozgach108System = Depends(get_system)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–≤–∞–Ω—Ç–æ–≤–æ–π –ø–∞–º—è—Ç–∏"""
    try:
        memory_stats = system.quantum_memory.get_memory_stats()
        return memory_stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/config")
async def get_config():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"""
    try:
        return {
            "system": config.get_section("system"),
            "models": config.get_section("models"),
            "quantum": config.get_section("quantum"),
            "api": config.get_section("api")
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# WebSocket –¥–ª—è real-time –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
@app.websocket("/ws")
async def websocket_endpoint(websocket):
    """WebSocket –¥–ª—è real-time –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    await websocket.accept()
    
    try:
        system = await get_system()
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_json()
            
            if data.get("type") == "query":
                query = data.get("query", "")
                domain_hint = data.get("domain_hint")
                
                if query:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                    response = await system.query(query, domain_hint)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    await websocket.send_json({
                        "type": "response",
                        "content": response.content,
                        "confidence": response.confidence,
                        "processing_time": response.processing_time,
                        "timestamp": response.timestamp.isoformat()
                    })
            
            elif data.get("type") == "ping":
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
                await websocket.send_json({
                    "type": "pong",
                    "timestamp": datetime.now().isoformat()
                })
            
            elif data.get("type") == "close":
                break
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
        await websocket.close()


# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ mozgach108 API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    global mozgach_system
    mozgach_system = Mozgach108System()
    
    logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã mozgach108 API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
    global mozgach_system
    if mozgach_system:
        await mozgach_system.shutdown()
    
    logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    uvicorn.run(
        app,
        host=config.get("api.host", "0.0.0.0"),
        port=config.get("api.port", 8000),
        log_level=config.get("system.log_level", "info").lower()
    )
