"""
–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ mozgach108
"""

import asyncio
import click
import logging
import sys
from pathlib import Path
from typing import Optional

from src.mozgach108_system import Mozgach108System
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.get("system.log_level", "INFO")),
    format=config.get("logging.format", "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
)

logger = logging.getLogger(__name__)


@click.group()
@click.version_option(version=config.get("system.version", "1.0.0"))
@click.option('--debug', is_flag=True, help='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏')
@click.option('--config', type=click.Path(), help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.pass_context
def cli(ctx, debug, config_path):
    """mozgach108 - –°–∏—Å—Ç–µ–º–∞ –∏–∑ 108 –∫–≤–∞–Ω—Ç–æ–≤–æ-–∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    ctx.ensure_object(dict)
    
    if debug:
        config.set("system.debug", True)
        config.set("system.log_level", "DEBUG")
        logging.getLogger().setLevel(logging.DEBUG)
    
    if config_path:
        config.config_path = config_path
        config._load_config()
    
    ctx.obj['config'] = config


@cli.command()
@click.option('--query', '-q', prompt='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å', help='–ó–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–µ')
@click.option('--domain', '-d', help='–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –¥–æ–º–µ–Ω–µ –∑–Ω–∞–Ω–∏–π')
@click.option('--output', '-o', type=click.Choice(['text', 'json', 'detailed']), default='text', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
@click.pass_context
def query(ctx, query, domain, output):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–µ mozgach108"""
    
    async def run_query():
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã mozgach108...")
            system = Mozgach108System()
            
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {query[:100]}...")
            response = await system.query(query, domain)
            
            if output == 'json':
                import json
                click.echo(json.dumps({
                    "content": response.content,
                    "confidence": response.confidence,
                    "domain_weights": response.domain_weights,
                    "processing_time": response.processing_time,
                    "timestamp": response.timestamp.isoformat()
                }, ensure_ascii=False, indent=2))
            
            elif output == 'detailed':
                click.echo(f"üîÆ –û—Ç–≤–µ—Ç mozgach108:")
                click.echo(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.content}")
                click.echo(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
                click.echo(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.processing_time:.2f}—Å")
                click.echo(f"üìä –î–æ–º–µ–Ω—ã –∑–Ω–∞–Ω–∏–π: {list(response.domain_weights.keys())}")
                click.echo(f"üîÆ –ö–≤–∞–Ω—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {response.quantum_state}")
            
            else:  # text
                click.echo(response.content)
            
            await system.shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
            sys.exit(1)
    
    asyncio.run(run_query())


@cli.command()
@click.argument('queries_file', type=click.Path(exists=True))
@click.option('--output', '-o', type=click.Path(), help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
@click.option('--format', 'output_format', type=click.Choice(['json', 'csv', 'txt']), default='json', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
@click.pass_context
def batch(ctx, queries_file, output, output_format):
    """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    
    async def run_batch():
        try:
            # –ß–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
            with open(queries_file, 'r', encoding='utf-8') as f:
                queries = [line.strip() for line in f if line.strip()]
            
            logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤...")
            
            system = Mozgach108System()
            responses = await system.batch_query(queries)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if output:
                output_path = Path(output)
                output_path.parent.mkdir(parents=True, exist_ok=True)
                
                if output_format == 'json':
                    import json
                    results = []
                    for i, response in enumerate(responses):
                        results.append({
                            "query": queries[i],
                            "response": response.content,
                            "confidence": response.confidence,
                            "processing_time": response.processing_time
                        })
                    
                    with open(output_path, 'w', encoding='utf-8') as f:
                        json.dump(results, f, ensure_ascii=False, indent=2)
                
                elif output_format == 'csv':
                    import csv
                    with open(output_path, 'w', newline='', encoding='utf-8') as f:
                        writer = csv.writer(f)
                        writer.writerow(['Query', 'Response', 'Confidence', 'Processing Time'])
                        for i, response in enumerate(responses):
                            writer.writerow([
                                queries[i],
                                response.content,
                                response.confidence,
                                response.processing_time
                            ])
                
                else:  # txt
                    with open(output_path, 'w', encoding='utf-8') as f:
                        for i, response in enumerate(responses):
                            f.write(f"Query: {queries[i]}\n")
                            f.write(f"Response: {response.content}\n")
                            f.write(f"Confidence: {response.confidence:.2f}\n")
                            f.write(f"Processing Time: {response.processing_time:.2f}s\n")
                            f.write("-" * 50 + "\n")
                
                click.echo(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
            
            else:
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
                for i, response in enumerate(responses):
                    click.echo(f"Query {i+1}: {queries[i]}")
                    click.echo(f"Response: {response.content}")
                    click.echo(f"Confidence: {response.confidence:.2f}")
                    click.echo("-" * 50)
            
            await system.shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
            sys.exit(1)
    
    asyncio.run(run_batch())


@cli.command()
@click.option('--host', default=None, help='–•–æ—Å—Ç –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞')
@click.option('--port', default=None, type=int, help='–ü–æ—Ä—Ç –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞')
@click.option('--workers', default=None, type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤')
@click.pass_context
def serve(ctx, host, port, workers):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä"""
    
    def run_server():
        try:
            import uvicorn
            from api.server import app
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            if host:
                config.set("api.host", host)
            if port:
                config.set("api.port", port)
            if workers:
                config.set("api.workers", workers)
            
            host = config.get("api.host", "0.0.0.0")
            port = config.get("api.port", 8000)
            workers = config.get("api.workers", 4)
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
            
            uvicorn.run(
                app,
                host=host,
                port=port,
                workers=workers,
                log_level=config.get("system.log_level", "info").lower()
            )
            
        except ImportError:
            click.echo("‚ùå –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install fastapi uvicorn", err=True)
            sys.exit(1)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
            sys.exit(1)
    
    run_server()


@cli.command()
@click.pass_context
def status(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    
    async def show_status():
        try:
            system = Mozgach108System()
            
            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await asyncio.sleep(2)
            
            stats = system.get_system_stats()
            
            click.echo("üîÆ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã mozgach108:")
            click.echo(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
            click.echo(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['average_processing_time']:.2f}—Å")
            click.echo(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1%}")
            click.echo(f"üß† –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {stats['loaded_models']}")
            click.echo(f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {stats['active_domains']}")
            click.echo(f"üîó –°–∏–ª–∞ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏: {stats['quantum_entanglement_strength']:.3f}")
            click.echo(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage_mb']}MB")
            
            await system.shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
            sys.exit(1)
    
    asyncio.run(show_status())


@cli.command()
@click.pass_context
def optimize(ctx):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"""
    
    async def run_optimization():
        try:
            logger.info("üîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
            
            system = Mozgach108System()
            await system.optimize_system()
            
            click.echo("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            stats = system.get_system_stats()
            click.echo(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
            click.echo(f"üß† –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {stats['loaded_models']}")
            click.echo(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage_mb']}MB")
            click.echo(f"üîó –°–∏–ª–∞ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏: {stats['quantum_entanglement_strength']:.3f}")
            
            await system.shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
            sys.exit(1)
    
    asyncio.run(run_optimization())


@cli.command()
@click.option('--section', help='–°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞')
@click.pass_context
def config_show(ctx, section):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    
    if section:
        config_section = config.get_section(section)
        if config_section:
            import json
            click.echo(json.dumps(config_section, indent=2, ensure_ascii=False))
        else:
            click.echo(f"‚ùå –°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", err=True)
    else:
        import json
        click.echo(json.dumps(config.config, indent=2, ensure_ascii=False))


@cli.command()
@click.argument('key_path')
@click.argument('value')
@click.pass_context
def config_set(ctx, key_path, value):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
        if value.lower() in ('true', 'false'):
            value = value.lower() == 'true'
        elif value.isdigit():
            value = int(value)
        elif value.replace('.', '').isdigit():
            value = float(value)
        
        config.set(key_path, value)
        config.save_config()
        
        click.echo(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {key_path} = {value}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.pass_context
def validate(ctx):
    """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    
    if config.validate_config():
        click.echo("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        sys.exit(0)
    else:
        click.echo("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏", err=True)
        sys.exit(1)


@cli.command()
@click.option('--interactive', '-i', is_flag=True, help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
@click.pass_context
def chat(ctx, interactive):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    
    async def run_chat():
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞...")
            
            system = Mozgach108System()
            
            click.echo("üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ mozgach108!")
            click.echo("üí° –í–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            click.echo("üí° –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            click.echo("-" * 50)
            
            while True:
                try:
                    query = click.prompt("–í—ã", type=str)
                    
                    if query.lower() in ('exit', 'quit', '–≤—ã—Ö–æ–¥'):
                        break
                    
                    if query.lower() == 'help':
                        click.echo("üîÆ mozgach108 - –°–∏—Å—Ç–µ–º–∞ –∏–∑ 108 –∫–≤–∞–Ω—Ç–æ–≤–æ-–∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                        click.echo("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                        click.echo("   - exit/quit/–≤—ã—Ö–æ–¥ - –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞")
                        click.echo("   - help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
                        click.echo("   - status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
                        click.echo("   - optimize - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
                        continue
                    
                    if query.lower() == 'status':
                        stats = system.get_system_stats()
                        click.echo(f"üìä –°—Ç–∞—Ç—É—Å: {stats['loaded_models']} –º–æ–¥–µ–ª–µ–π, {stats['memory_usage_mb']}MB –ø–∞–º—è—Ç–∏")
                        continue
                    
                    if query.lower() == 'optimize':
                        await system.optimize_system()
                        click.echo("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                        continue
                    
                    if not query.strip():
                        continue
                    
                    click.echo("üîÆ mozgach108 –¥—É–º–∞–µ—Ç...")
                    response = await system.query(query)
                    
                    click.echo(f"üîÆ mozgach108: {response.content}")
                    click.echo(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
                    click.echo("-" * 30)
                    
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            await system.shutdown()
            click.echo("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
            click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
            sys.exit(1)
    
    asyncio.run(run_chat())


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    try:
        cli()
    except KeyboardInterrupt:
        click.echo("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        click.echo(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", err=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
